(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{110:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return n})),t.d(a,"metadata",(function(){return b})),t.d(a,"toc",(function(){return o})),t.d(a,"default",(function(){return m}));var r=t(3),i=t(7),c=(t(0),t(116)),n={id:"cameradevice.cameradevice-1",title:"Interface: CameraDevice",sidebar_label:"CameraDevice",custom_edit_url:null,hide_title:!0},b={unversionedId:"api/interfaces/cameradevice.cameradevice-1",id:"api/interfaces/cameradevice.cameradevice-1",isDocsHomePage:!1,title:"Interface: CameraDevice",description:"Interface: CameraDevice",source:"@site/docs/api/interfaces/cameradevice.cameradevice-1.md",slug:"/api/interfaces/cameradevice.cameradevice-1",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1",editUrl:null,version:"current",sidebar_label:"CameraDevice",sidebar:"someSidebar",previous:{title:"Class: CameraRuntimeError",permalink:"/react-native-vision-camera/docs/api/classes/cameraerror.cameraruntimeerror"},next:{title:"Interface: CameraDeviceFormat",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"}},o=[{value:"Properties",id:"properties",children:[{value:"devices",id:"devices",children:[]},{value:"formats",id:"formats",children:[]},{value:"hasFlash",id:"hasflash",children:[]},{value:"hasTorch",id:"hastorch",children:[]},{value:"id",id:"id",children:[]},{value:"isMultiCam",id:"ismulticam",children:[]},{value:"maxZoom",id:"maxzoom",children:[]},{value:"minZoom",id:"minzoom",children:[]},{value:"name",id:"name",children:[]},{value:"neutralZoom",id:"neutralzoom",children:[]},{value:"position",id:"position",children:[]},{value:"supportsLowLightBoost",id:"supportslowlightboost",children:[]}]}],l={toc:o};function m(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"interface-cameradevice"},"Interface: CameraDevice"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice"},"CameraDevice"),".CameraDevice"),Object(c.b)("p",null,"Represents a camera device discovered by the ",Object(c.b)("inlineCode",{parentName:"p"},"Camera.getAvailableCameraDevices()")," function"),Object(c.b)("h2",{id:"properties"},"Properties"),Object(c.b)("h3",{id:"devices"},"devices"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"devices"),": ",Object(c.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice#physicalcameradevicetype"},Object(c.b)("em",{parentName:"a"},"PhysicalCameraDeviceType")),"[]"),Object(c.b)("p",null,"The physical devices this ",Object(c.b)("inlineCode",{parentName:"p"},"CameraDevice")," contains."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"If this camera device is a ",Object(c.b)("strong",{parentName:"li"},"logical camera")," (combination of multiple physical cameras), there are multiple cameras in this array."),Object(c.b)("li",{parentName:"ul"},"If this camera device is a ",Object(c.b)("strong",{parentName:"li"},"physical camera"),", there is only a single element in this array.")),Object(c.b)("p",null,"You can check if the camera is a logical multi-camera by using the ",Object(c.b)("inlineCode",{parentName:"p"},"isMultiCam")," property."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L172"},"CameraDevice.ts:172")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"formats"},"formats"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"formats"),": ",Object(c.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(c.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),Object(c.b)("p",null,"All available formats for this camera device. Use this to find the best format for your use case and set it to the Camera's ",Object(c.b)("inlineCode",{parentName:"p"},"format")," property."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L217"},"CameraDevice.ts:217")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"hasflash"},"hasFlash"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"hasFlash"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Specifies whether this camera supports enabling flash for photo capture."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L184"},"CameraDevice.ts:184")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"hastorch"},"hasTorch"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"hasTorch"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Specifies whether this camera supports continuously enabling the flash to act like a torch (flash with video capture)"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L188"},"CameraDevice.ts:188")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"id"},"id"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"id"),": ",Object(c.b)("em",{parentName:"p"},"string")),Object(c.b)("p",null,"The native ID of the camera device instance."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L163"},"CameraDevice.ts:163")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"ismulticam"},"isMultiCam"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"isMultiCam"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"A property indicating whether the receiver is a logical camera consisting of multiple physical cameras."),Object(c.b)("p",null,"Examples:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"The Dual Camera, which supports seamlessly switching between a wide and telephoto camera while zooming and generating depth data from the disparities between the different points of view of the physical cameras."),Object(c.b)("li",{parentName:"ul"},"The TrueDepth Camera, which generates depth data from disparities between a YUV camera and an Infrared camera pointed in the same direction.")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L196"},"CameraDevice.ts:196")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"maxzoom"},"maxZoom"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"maxZoom"),": ",Object(c.b)("em",{parentName:"p"},"number")),Object(c.b)("p",null,"Maximum available zoom factor"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L204"},"CameraDevice.ts:204")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"minzoom"},"minZoom"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"minZoom"),": ",Object(c.b)("em",{parentName:"p"},"number")),Object(c.b)("p",null,"Minimum available zoom factor"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L200"},"CameraDevice.ts:200")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"name"},"name"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"name"),": ",Object(c.b)("em",{parentName:"p"},"string")),Object(c.b)("p",null,"A friendly localized name describing the camera."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L180"},"CameraDevice.ts:180")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"neutralzoom"},"neutralZoom"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"neutralZoom"),": ",Object(c.b)("em",{parentName:"p"},"number")),Object(c.b)("p",null,"The zoom percentage (",Object(c.b)("inlineCode",{parentName:"p"},"0.0"),"-",Object(c.b)("inlineCode",{parentName:"p"},"1.0"),') where the camera is "neutral".'),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"For single-physical cameras this property is always ",Object(c.b)("inlineCode",{parentName:"li"},"0.0"),"."),Object(c.b)("li",{parentName:"ul"},"For multi cameras this property is a value between ",Object(c.b)("inlineCode",{parentName:"li"},"0.0")," and ",Object(c.b)("inlineCode",{parentName:"li"},"1.0"),", where the camera is in wide-angle mode and hasn't switched to the ultra-wide (",Object(c.b)("inlineCode",{parentName:"li"},"0.5"),"x zoom) or telephoto camera yet.")),Object(c.b)("p",null,"Use this value as an initial value for the zoom property if you implement custom zoom. (e.g. reanimated shared value should be initially set to this value)"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L213"},"CameraDevice.ts:213")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"position"},"position"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"position"),": ",Object(c.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameraposition#cameraposition"},Object(c.b)("em",{parentName:"a"},"CameraPosition"))),Object(c.b)("p",null,"Specifies the physical position of this camera. (back or front)"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L176"},"CameraDevice.ts:176")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"supportslowlightboost"},"supportsLowLightBoost"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"supportsLowLightBoost"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Whether this camera device supports low light boost."),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/b1f78c0/src/CameraDevice.ts#L221"},"CameraDevice.ts:221")))}m.isMDXComponent=!0},116:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return h}));var r=t(0),i=t.n(r);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function b(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,i=function(e,a){if(null==e)return{};var t,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),m=function(e){var a=i.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):b(b({},a),e)),t},s=function(e){var a=m(e.components);return i.a.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.a.createElement(i.a.Fragment,{},a)}},u=i.a.forwardRef((function(e,a){var t=e.components,r=e.mdxType,c=e.originalType,n=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),s=m(t),u=r,h=s["".concat(n,".").concat(u)]||s[u]||p[u]||c;return t?i.a.createElement(h,b(b({ref:a},l),{},{components:t})):i.a.createElement(h,b({ref:a},l))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var c=t.length,n=new Array(c);n[0]=u;var b={};for(var o in a)hasOwnProperty.call(a,o)&&(b[o]=a[o]);b.originalType=e,b.mdxType="string"==typeof e?e:r,n[1]=b;for(var l=2;l<c;l++)n[l]=t[l];return i.a.createElement.apply(null,n)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);