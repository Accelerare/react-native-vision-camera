(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{119:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(a),d=n,m=s["".concat(r,".").concat(d)]||s[d]||u[d]||o;return a?i.a.createElement(m,b(b({ref:t},c),{},{components:a})):i.a.createElement(m,b({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,r=new Array(o);r[0]=d;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:n,r[1]=b;for(var c=2;c<o;c++)r[c]=a[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},93:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(3),i=a(7),o=(a(0),a(119)),r={id:"photofile.takephotooptions",title:"Interface: TakePhotoOptions",sidebar_label:"TakePhotoOptions",custom_edit_url:null,hide_title:!0},b={unversionedId:"api/interfaces/photofile.takephotooptions",id:"api/interfaces/photofile.takephotooptions",isDocsHomePage:!1,title:"Interface: TakePhotoOptions",description:"Interface: TakePhotoOptions",source:"@site/docs/api/interfaces/photofile.takephotooptions.md",slug:"/api/interfaces/photofile.takephotooptions",permalink:"/react-native-vision-camera/docs/api/interfaces/photofile.takephotooptions",editUrl:null,version:"current",sidebar_label:"TakePhotoOptions",sidebar:"someSidebar",previous:{title:"Interface: PhotoFile",permalink:"/react-native-vision-camera/docs/api/interfaces/photofile.photofile-1"},next:{title:"Interface: Point",permalink:"/react-native-vision-camera/docs/api/interfaces/point.point-1"}},l=[{value:"Properties",id:"properties",children:[{value:"enableAutoDistortionCorrection",id:"enableautodistortioncorrection",children:[]},{value:"enableAutoRedEyeReduction",id:"enableautoredeyereduction",children:[]},{value:"enableAutoStabilization",id:"enableautostabilization",children:[]},{value:"enableVirtualDeviceFusion",id:"enablevirtualdevicefusion",children:[]},{value:"flash",id:"flash",children:[]},{value:"photoCodec",id:"photocodec",children:[]},{value:"qualityPrioritization",id:"qualityprioritization",children:[]},{value:"skipMetadata",id:"skipmetadata",children:[]}]}],c={toc:l};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"interface-takephotooptions"},"Interface: TakePhotoOptions"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/photofile"},"PhotoFile"),".TakePhotoOptions"),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("h3",{id:"enableautodistortioncorrection"},"enableAutoDistortionCorrection"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"enableAutoDistortionCorrection"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"boolean")),Object(o.b)("p",null,"Specifies whether the photo output should use content aware distortion correction on this photo request (at its discretion)."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default"))," false"),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L53"},"PhotoFile.ts:53")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"enableautoredeyereduction"},"enableAutoRedEyeReduction"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"enableAutoRedEyeReduction"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"boolean")),Object(o.b)("p",null,"Specifies whether red-eye reduction should be applied automatically on flash captures."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default"))," false"),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L34"},"PhotoFile.ts:34")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"enableautostabilization"},"enableAutoStabilization"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"enableAutoStabilization"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"boolean")),Object(o.b)("p",null,"Indicates whether still image stabilization will be employed when capturing the photo"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default"))," false"),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L47"},"PhotoFile.ts:47")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"enablevirtualdevicefusion"},"enableVirtualDeviceFusion"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"enableVirtualDeviceFusion"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"boolean")),Object(o.b)("p",null,"Specifies whether a virtual multi-cam device should capture images from all containing physical cameras\nto create a combined, higher quality image."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"see"))," ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/avfoundation/avcapturephotosettings/3192192-isautovirtualdevicefusionenabled"},Object(o.b)("inlineCode",{parentName:"a"},"isAutoVirtualDeviceFusionEnabled"))),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L41"},"PhotoFile.ts:41")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"flash"},"flash"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"flash"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"off")," ","|"," ",Object(o.b)("em",{parentName:"p"},"on")," ","|"," ",Object(o.b)("em",{parentName:"p"},"auto")),Object(o.b)("p",null,"Whether the Flash should be enabled or disabled"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default")),' "auto"'),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L28"},"PhotoFile.ts:28")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"photocodec"},"photoCodec"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"photoCodec"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"hevc")," ","|"," ",Object(o.b)("em",{parentName:"p"},"hevc-alpha")," ","|"," ",Object(o.b)("em",{parentName:"p"},"jpeg")),Object(o.b)("p",null,"Specify the photo codec to use. To get a list of available photo codecs use the ",Object(o.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/classes/camera.camera-1#getavailablephotocodecs"},Object(o.b)("inlineCode",{parentName:"a"},"getAvailablePhotoCodecs()"))," function."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"platform"))," iOS"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default"))," undefined"),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L11"},"PhotoFile.ts:11")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"qualityprioritization"},"qualityPrioritization"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"qualityPrioritization"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"quality")," ","|"," ",Object(o.b)("em",{parentName:"p"},"balanced")," ","|"," ",Object(o.b)("em",{parentName:"p"},"speed")),Object(o.b)("p",null,"Indicates how photo quality should be prioritized against speed."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},'"quality"')," Indicates that speed of photo delivery is most important, even at the expense of quality"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},'"balanced"')," Indicates that photo quality and speed of delivery are balanced in priority"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},'"speed"')," Indicates that photo quality is paramount, even at the expense of shot-to-shot time")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"platform"))," iOS 13.0+"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default")),' "balanced"'),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L22"},"PhotoFile.ts:22")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"skipmetadata"},"skipMetadata"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(o.b)("strong",{parentName:"p"},"skipMetadata"),": ",Object(o.b)("em",{parentName:"p"},"undefined")," ","|"," ",Object(o.b)("em",{parentName:"p"},"boolean")),Object(o.b)("p",null,"When set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", metadata reading and mapping will be skipped. (",Object(o.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/photofile.photofile-1#metadata"},Object(o.b)("inlineCode",{parentName:"a"},"PhotoFile.metadata"))," will be null)"),Object(o.b)("p",null,"This might result in a faster capture, as metadata reading and mapping requires File IO."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"default"))," false"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"platform"))," Android"),Object(o.b)("p",null,"Defined in: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/bfba6a9/src/PhotoFile.ts#L63"},"PhotoFile.ts:63")))}p.isMDXComponent=!0}}]);