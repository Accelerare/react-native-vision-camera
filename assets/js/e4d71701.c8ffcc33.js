(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{116:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return n})),t.d(a,"metadata",(function(){return b})),t.d(a,"toc",(function(){return o})),t.d(a,"default",(function(){return s}));var r=t(3),c=t(7),i=(t(0),t(124)),n={id:"cameradevice.cameradevice-1",title:"Interface: CameraDevice",sidebar_label:"CameraDevice",custom_edit_url:null,hide_title:!0},b={unversionedId:"api/interfaces/cameradevice.cameradevice-1",id:"api/interfaces/cameradevice.cameradevice-1",isDocsHomePage:!1,title:"Interface: CameraDevice",description:"Interface: CameraDevice",source:"@site/docs/api/interfaces/cameradevice.cameradevice-1.md",slug:"/api/interfaces/cameradevice.cameradevice-1",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1",editUrl:null,version:"current",sidebar_label:"CameraDevice",sidebar:"someSidebar",previous:{title:"Interface: CameraProps",permalink:"/react-native-vision-camera/docs/api/interfaces/camera.cameraprops"},next:{title:"Interface: CameraDeviceFormat",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"}},o=[{value:"Properties",id:"properties",children:[{value:"devices",id:"devices",children:[]},{value:"formats",id:"formats",children:[]},{value:"hasFlash",id:"hasflash",children:[]},{value:"hasTorch",id:"hastorch",children:[]},{value:"id",id:"id",children:[]},{value:"isMultiCam",id:"ismulticam",children:[]},{value:"maxZoom",id:"maxzoom",children:[]},{value:"minZoom",id:"minzoom",children:[]},{value:"name",id:"name",children:[]},{value:"neutralZoom",id:"neutralzoom",children:[]},{value:"position",id:"position",children:[]},{value:"supportsDepthCapture",id:"supportsdepthcapture",children:[]},{value:"supportsFocus",id:"supportsfocus",children:[]},{value:"supportsLowLightBoost",id:"supportslowlightboost",children:[]},{value:"supportsRawCapture",id:"supportsrawcapture",children:[]}]}],p={toc:o};function s(e){var a=e.components,t=Object(c.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"interface-cameradevice"},"Interface: CameraDevice"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice"},"CameraDevice"),".CameraDevice"),Object(i.b)("p",null,"Represents a camera device discovered by the ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/classes/camera.camera-1#getavailablecameradevices"},Object(i.b)("inlineCode",{parentName:"a"},"Camera.getAvailableCameraDevices()"))," function"),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("h3",{id:"devices"},"devices"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"devices"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice#physicalcameradevicetype"},Object(i.b)("em",{parentName:"a"},"PhysicalCameraDeviceType")),"[]"),Object(i.b)("p",null,"The physical devices this ",Object(i.b)("inlineCode",{parentName:"p"},"CameraDevice")," contains."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If this camera device is a ",Object(i.b)("strong",{parentName:"li"},"logical camera")," (combination of multiple physical cameras), there are multiple cameras in this array."),Object(i.b)("li",{parentName:"ul"},"If this camera device is a ",Object(i.b)("strong",{parentName:"li"},"physical camera"),", there is only a single element in this array.")),Object(i.b)("p",null,"You can check if the camera is a logical multi-camera by using the ",Object(i.b)("inlineCode",{parentName:"p"},"isMultiCam")," property."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L171"},"CameraDevice.ts:171")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"formats"},"formats"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"formats"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),Object(i.b)("p",null,"All available formats for this camera device. Use this to find the best format for your use case and set it to the Camera's {@linkcode Camera.format} property."),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"https://cuvent.github.io/react-native-vision-camera/docs/formats"},"the Camera Formats documentation")," for more information about Camera Formats."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L218"},"CameraDevice.ts:218")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"hasflash"},"hasFlash"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"hasFlash"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Specifies whether this camera supports enabling flash for photo capture."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L183"},"CameraDevice.ts:183")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"hastorch"},"hasTorch"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"hasTorch"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Specifies whether this camera supports continuously enabling the flash to act like a torch (flash with video capture)"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L187"},"CameraDevice.ts:187")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"id"},"id"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"id"),": ",Object(i.b)("em",{parentName:"p"},"string")),Object(i.b)("p",null,"The native ID of the camera device instance."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L162"},"CameraDevice.ts:162")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"ismulticam"},"isMultiCam"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"isMultiCam"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"A property indicating whether the receiver is a logical camera consisting of multiple physical cameras."),Object(i.b)("p",null,"Examples:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The Dual Camera, which supports seamlessly switching between a wide and telephoto camera while zooming and generating depth data from the disparities between the different points of view of the physical cameras."),Object(i.b)("li",{parentName:"ul"},"The TrueDepth Camera, which generates depth data from disparities between a YUV camera and an Infrared camera pointed in the same direction.")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L195"},"CameraDevice.ts:195")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"maxzoom"},"maxZoom"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"maxZoom"),": ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Maximum available zoom factor"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L203"},"CameraDevice.ts:203")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"minzoom"},"minZoom"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"minZoom"),": ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Minimum available zoom factor"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L199"},"CameraDevice.ts:199")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"name"},"name"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"name"),": ",Object(i.b)("em",{parentName:"p"},"string")),Object(i.b)("p",null,"A friendly localized name describing the camera."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L179"},"CameraDevice.ts:179")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"neutralzoom"},"neutralZoom"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"neutralZoom"),": ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"The zoom percentage (",Object(i.b)("inlineCode",{parentName:"p"},"0.0"),"-",Object(i.b)("inlineCode",{parentName:"p"},"1.0"),') where the camera is "neutral".'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"For single-physical cameras this property is always ",Object(i.b)("inlineCode",{parentName:"li"},"0.0"),"."),Object(i.b)("li",{parentName:"ul"},"For multi cameras this property is a value between ",Object(i.b)("inlineCode",{parentName:"li"},"0.0")," and ",Object(i.b)("inlineCode",{parentName:"li"},"1.0"),", where the camera is in wide-angle mode and hasn't switched to the ultra-wide (",Object(i.b)("inlineCode",{parentName:"li"},"0.5"),"x zoom) or telephoto camera yet.")),Object(i.b)("p",null,"Use this value as an initial value for the zoom property if you implement custom zoom. (e.g. reanimated shared value should be initially set to this value)"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L212"},"CameraDevice.ts:212")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"position"},"position"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"position"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameraposition#cameraposition"},Object(i.b)("em",{parentName:"a"},"CameraPosition"))),Object(i.b)("p",null,"Specifies the physical position of this camera. (back or front)"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L175"},"CameraDevice.ts:175")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"supportsdepthcapture"},"supportsDepthCapture"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"supportsDepthCapture"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Whether this camera supports taking photos with depth data."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"! Work in Progress !")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L228"},"CameraDevice.ts:228")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"supportsfocus"},"supportsFocus"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"supportsFocus"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Specifies whether this device supports focussing (",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/classes/camera.camera-1#focus"},Object(i.b)("inlineCode",{parentName:"a"},"Camera.focus(...)")),")"),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L238"},"CameraDevice.ts:238")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"supportslowlightboost"},"supportsLowLightBoost"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"supportsLowLightBoost"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Whether this camera device supports low light boost."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L222"},"CameraDevice.ts:222")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"supportsrawcapture"},"supportsRawCapture"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"supportsRawCapture"),": ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Whether this camera supports taking photos in RAW format"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"! Work in Progress !")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/89a3581/src/CameraDevice.ts#L234"},"CameraDevice.ts:234")))}s.isMDXComponent=!0},124:function(e,a,t){"use strict";t.d(a,"a",(function(){return l})),t.d(a,"b",(function(){return h}));var r=t(0),c=t.n(r);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function b(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,c=function(e,a){if(null==e)return{};var t,r,c={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(c[t]=e[t]);return c}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var p=c.a.createContext({}),s=function(e){var a=c.a.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):b(b({},a),e)),t},l=function(e){var a=s(e.components);return c.a.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return c.a.createElement(c.a.Fragment,{},a)}},u=c.a.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,n=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=s(t),u=r,h=l["".concat(n,".").concat(u)]||l[u]||m[u]||i;return t?c.a.createElement(h,b(b({ref:a},p),{},{components:t})):c.a.createElement(h,b({ref:a},p))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,n=new Array(i);n[0]=u;var b={};for(var o in a)hasOwnProperty.call(a,o)&&(b[o]=a[o]);b.originalType=e,b.mdxType="string"==typeof e?e:r,n[1]=b;for(var p=2;p<i;p++)n[p]=t[p];return c.a.createElement.apply(null,n)}return c.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);