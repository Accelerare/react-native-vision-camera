"use strict";(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[997],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return g}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return a?r.createElement(g,s(s({ref:t},p),{},{components:a})):r.createElement(g,s({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return s}});var r=a(7294),n=a(6010),o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(o.tabItem,s),hidden:a},t)}},4866:function(e,t,a){a.d(t,{Z:function(){return y}});var r=a(3117),n=a(7294),o=a(6010),s=a(2466),i=a(6550),l=a(1980),c=a(7392),p=a(12);function m(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function u(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const r=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=u(e),[s,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,c]=g({queryString:a,groupId:r}),[m,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,p.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),f=(()=>{const e=l??m;return d({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),h(e)}),[c,h,o]),tabValues:o}}var f=a(2389),k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:a,selectedValue:i,selectValue:l,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),u=e=>{const t=e.currentTarget,a=p.indexOf(t),r=c[a].value;r!==i&&(m(t),l(r))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:u},s,{className:(0,o.Z)("tabs__item",k.tabItem,s?.className,{"tabs__item--active":i===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:r}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=h(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},n.createElement(v,(0,r.Z)({},e,t)),n.createElement(b,(0,r.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return n.createElement(N,(0,r.Z)({key:String(t)},e))}},1352:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=a(3117),n=(a(7294),a(3905)),o=a(4866),s=a(5162),i=a(4996);const l={id:"frame-processors",title:"Frame Processors",sidebar_label:"Frame Processors"},c=void 0,p={unversionedId:"guides/frame-processors",id:"guides/frame-processors",title:"Frame Processors",description:"What are frame processors?",source:"@site/docs/guides/FRAME_PROCESSORS.mdx",sourceDirName:"guides",slug:"/guides/frame-processors",permalink:"/docs/guides/frame-processors",draft:!1,editUrl:"https://github.com/mrousavy/react-native-vision-camera/edit/main/docs/docs/guides/FRAME_PROCESSORS.mdx",tags:[],version:"current",frontMatter:{id:"frame-processors",title:"Frame Processors",sidebar_label:"Frame Processors"},sidebar:"visionSidebar",previous:{title:"Taking Photos/Recording Videos",permalink:"/docs/guides/capturing"},next:{title:"Overview",permalink:"/docs/guides/frame-processors-plugins-overview"}},m={},u=[{value:"What are frame processors?",id:"what-are-frame-processors",level:3},{value:"Interacting with Frame Processors",id:"interacting-with-frame-processors",level:3},{value:"Using Frame Processor Plugins",id:"using-frame-processor-plugins",level:3},{value:"Selecting a Format for a Frame Processor",id:"selecting-a-format-for-a-frame-processor",level:3},{value:"Benchmarks",id:"benchmarks",level:3},{value:"Avoiding Frame-drops",id:"avoiding-frame-drops",level:3},{value:"ESLint react-hooks plugin",id:"eslint-react-hooks-plugin",level:3},{value:"Technical",id:"technical",level:3},{value:"Frame Processors",id:"frame-processors",level:4},{value:"Frame Processor Plugins",id:"frame-processor-plugins",level:4},{value:"The <code>Frame</code> object",id:"the-frame-object",level:4},{value:"Disabling Frame Processors",id:"disabling-frame-processors",level:3},{value:"Android",id:"android",level:4},{value:"iOS",id:"ios",level:4},{value:"\ud83d\ude80 Next section: Zooming (or creating a Frame Processor Plugin)",id:"-next-section-zooming-or-creating-a-frame-processor-plugin",level:4}],d={toc:u},g="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(g,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",null,(0,n.kt)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"283",height:"535",style:{float:"right"}},(0,n.kt)("image",{href:(0,i.Z)("img/frame-processors.gif"),x:"18",y:"33",width:"247",height:"469"}),(0,n.kt)("image",{href:(0,i.Z)("img/frame.png"),width:"283",height:"535"}))),(0,n.kt)("h3",{id:"what-are-frame-processors"},"What are frame processors?"),(0,n.kt)("p",null,"Frame processors are functions that are written in JavaScript (or TypeScript) which can be used to ",(0,n.kt)("strong",{parentName:"p"},'process frames the camera "sees"'),".\nInside those functions you can call ",(0,n.kt)("strong",{parentName:"p"},"Frame Processor Plugins"),", which are high performance native functions specifically designed for certain use-cases."),(0,n.kt)("p",null,"For example, you might want to create a ",(0,n.kt)("a",{parentName:"p",href:"https://apps.apple.com/us/app/not-hotdog/id1212457521"},"Hotdog/Not Hotdog detector app")," ",(0,n.kt)("strong",{parentName:"p"},"without writing any native code"),", while still ",(0,n.kt)("strong",{parentName:"p"},"achieving native performance"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    \'worklet\'\n    const isHotdog = detectIsHotdog(frame)\n    console.log(isHotdog ? "Hotdog!" : "Not Hotdog.")\n  }, [])\n\n  return (\n    <Camera\n      {...cameraProps}\n      frameProcessor={frameProcessor}\n    />\n  )\n}\n')),(0,n.kt)("p",null,"Frame processors are by far not limited to Hotdog detection, other examples include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"AI")," for ",(0,n.kt)("strong",{parentName:"li"},"facial recognition")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"AI")," for ",(0,n.kt)("strong",{parentName:"li"},"object detection")),(0,n.kt)("li",{parentName:"ul"},"Using ",(0,n.kt)("strong",{parentName:"li"},"Tensorflow"),", ",(0,n.kt)("strong",{parentName:"li"},"MLKit Vision"),", ",(0,n.kt)("strong",{parentName:"li"},"Apple Vision")," or other libraries"),(0,n.kt)("li",{parentName:"ul"},"Creating ",(0,n.kt)("strong",{parentName:"li"},"realtime video-chats")," using ",(0,n.kt)("strong",{parentName:"li"},"WebRTC")," to directly send the camera frames over the network"),(0,n.kt)("li",{parentName:"ul"},"Creating scanners for ",(0,n.kt)("strong",{parentName:"li"},"QR codes"),", ",(0,n.kt)("strong",{parentName:"li"},"Barcodes")," or even custom codes such as ",(0,n.kt)("strong",{parentName:"li"},"Snapchat's SnapCodes")," or ",(0,n.kt)("strong",{parentName:"li"},"Apple's AppClips")),(0,n.kt)("li",{parentName:"ul"},"Creating ",(0,n.kt)("strong",{parentName:"li"},"snapchat-like filters"),", e.g. draw a dog-mask filter over the user's face"),(0,n.kt)("li",{parentName:"ul"},"Creating ",(0,n.kt)("strong",{parentName:"li"},"color filters")," with depth-detection")),(0,n.kt)("p",null,"Because they are written in JS, Frame Processors are ",(0,n.kt)("strong",{parentName:"p"},"simple"),", ",(0,n.kt)("strong",{parentName:"p"},"powerful"),", ",(0,n.kt)("strong",{parentName:"p"},"extensible")," and ",(0,n.kt)("strong",{parentName:"p"},"easy to create")," while still running at ",(0,n.kt)("strong",{parentName:"p"},"native performance"),". (Frame Processors can run up to ",(0,n.kt)("strong",{parentName:"p"},"1000 times a second"),"!) Also, you can use ",(0,n.kt)("strong",{parentName:"p"},"fast-refresh")," to quickly see changes while developing or publish ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/react-native-code-push"},"over-the-air updates")," to tweak the Hotdog detector's sensitivity in live apps without pushing a native update."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Frame Processors require ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},(0,n.kt)("strong",{parentName:"a"},"react-native-reanimated"))," 2.2.0 or higher. Also make sure to add"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import 'react-native-reanimated'\n")),(0,n.kt)("p",{parentName:"admonition"},"to the top of the file when using ",(0,n.kt)("inlineCode",{parentName:"p"},"useFrameProcessor"),".")),(0,n.kt)("h3",{id:"interacting-with-frame-processors"},"Interacting with Frame Processors"),(0,n.kt)("p",null,"Since Frame Processors run in ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/worklets"},(0,n.kt)("strong",{parentName:"a"},"Worklets")),", you can directly use JS values such as React state:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'// can be controlled with a Slider\nconst [sensitivity, setSensitivity] = useState(0.4)\n\nconst frameProcessor = useFrameProcessor((frame) => {\n  \'worklet\'\n  const isHotdog = detectIsHotdog(frame, sensitivity)\n  console.log(isHotdog ? "Hotdog!" : "Not Hotdog.")\n}, [sensitivity])\n')),(0,n.kt)("p",null,"You can also easily read from, and assign to ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/shared-values"},(0,n.kt)("strong",{parentName:"a"},"Shared Values"))," to create smooth, 60 FPS animations."),(0,n.kt)("p",null,"In this example, we detect a cat in the frame - if a cat was found, we assign the ",(0,n.kt)("inlineCode",{parentName:"p"},"catBounds")," Shared Value to the coordinates of the cat (relative to the screen) which we can then use in a ",(0,n.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," hook to position the red rectangle surrounding the cat. This updates in realtime on the UI Thread, and can also be smoothly animated with ",(0,n.kt)("inlineCode",{parentName:"p"},"withSpring")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"withTiming"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{6}","{6}":!0},"// represents position of the cat on the screen \ud83d\udc08\nconst catBounds = useSharedValue({ top: 0, left: 0, right: 0, bottom: 0 })\n\n// continously sets 'catBounds' to the cat's coordinates on screen\nconst frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  catBounds.value = scanFrameForCat(frame)\n}, [catBounds])\n\n// uses 'catBounds' to position the red rectangle on screen.\n// smoothly updates on UI thread whenever 'catBounds' is changed\nconst boxOverlayStyle = useAnimatedStyle(() => ({\n  position: 'absolute',\n  borderWidth: 1,\n  borderColor: 'red',\n  ...catBounds.value\n}), [catBounds])\n\nreturn (\n  <View>\n    <Camera {...cameraProps} frameProcessor={frameProcessor} />\n    // draws a red rectangle on the screen which surrounds the cat\n    <Reanimated.View style={boxOverlayStyle} />\n  </View>\n)\n")),(0,n.kt)("p",null,"And you can also call back to the React-JS thread by using ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/miscellaneous/runOnJS/"},(0,n.kt)("inlineCode",{parentName:"a"},"runOnJS")),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{9}","{9}":!0},"const onQRCodeDetected = useCallback((qrCode: string) => {\n  navigation.push(\"ProductPage\", { productId: qrCode })\n}, [])\n\nconst frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const qrCodes = scanQRCodes(frame)\n  if (qrCodes.length > 0) {\n    runOnJS(onQRCodeDetected)(qrCodes[0])\n  }\n}, [onQRCodeDetected])\n")),(0,n.kt)("h3",{id:"using-frame-processor-plugins"},"Using Frame Processor Plugins"),(0,n.kt)("p",null,"Frame Processor Plugins are distributed through npm. To install the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/vision-camera-image-labeler"},(0,n.kt)("strong",{parentName:"a"},"vision-camera-image-labeler"))," plugin, run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm i vision-camera-image-labeler\ncd ios && pod install\n")),(0,n.kt)("p",null,"Then add it to your ",(0,n.kt)("inlineCode",{parentName:"p"},"babel.config.js"),". For the Image Labeler, this will be ",(0,n.kt)("inlineCode",{parentName:"p"},"__labelImage"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:"{6}","{6}":!0},"module.exports = {\n  plugins: [\n    [\n      'react-native-reanimated/plugin',\n      {\n        globals: ['__labelImage'],\n      },\n    ],\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"You have to restart metro-bundler for changes in the ",(0,n.kt)("inlineCode",{parentName:"p"},"babel.config.js")," file to take effect.")),(0,n.kt)("p",null,"That's it! \ud83c\udf89 Now you can use it:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const labels = labelImage(frame)\n  // ...\n}, [])\n")),(0,n.kt)("p",null,"Check out ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/frame-processor-plugin-list"},(0,n.kt)("strong",{parentName:"a"},"Frame Processor community plugins"))," to discover plugins, or ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/frame-processors-plugins-overview"},(0,n.kt)("strong",{parentName:"a"},"start creating a plugin yourself")),"!"),(0,n.kt)("h3",{id:"selecting-a-format-for-a-frame-processor"},"Selecting a Format for a Frame Processor"),(0,n.kt)("p",null,"When running frame processors, it is often important to choose an appropriate ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/formats"},"format"),". Here are some general tips to consider:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If you are running heavy AI/ML calculations in your frame processor, make sure to ",(0,n.kt)("a",{parentName:"li",href:"/docs/guides/formats"},"select a format")," that has a lower resolution to optimize it's performance."),(0,n.kt)("li",{parentName:"ul"},"Sometimes a frame processor plugin only works with specific ",(0,n.kt)("a",{parentName:"li",href:"/docs/api/interfaces/CameraDeviceFormat#pixelformat"},"pixel formats"),". Some plugins (like MLKit) don't work with ",(0,n.kt)("inlineCode",{parentName:"li"},"x420"),".")),(0,n.kt)("h3",{id:"benchmarks"},"Benchmarks"),(0,n.kt)("p",null,"Frame Processors are ",(0,n.kt)("em",{parentName:"p"},"really")," fast. I have used ",(0,n.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/ml-kit/ios/label-images"},"MLKit Vision Image Labeling")," to label 4k Camera frames in realtime, and measured the following results:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fully natively (written in pure Objective-C, no React interaction at all), I have measured an average of ",(0,n.kt)("strong",{parentName:"li"},"68ms")," per call."),(0,n.kt)("li",{parentName:"ul"},"As a Frame Processor Plugin (written in Objective-C, called through a JS Frame Processor function), I have measured an average of ",(0,n.kt)("strong",{parentName:"li"},"69ms")," per call.")),(0,n.kt)("p",null,"This means that ",(0,n.kt)("strong",{parentName:"p"},"the Frame Processor API only takes ~1ms longer than a fully native implementation"),", making it ",(0,n.kt)("strong",{parentName:"p"},"the fastest and easiest way to run any sort of Frame Processing in React Native"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"All measurements are recorded on an iPhone 11 Pro, benchmarked total execution time of the ",(0,n.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/avfoundation/avcapturevideodataoutputsamplebufferdelegate/1385775-captureoutput"},(0,n.kt)("inlineCode",{parentName:"a"},"captureOutput"))," function by using ",(0,n.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/corefoundation/1543542-cfabsolutetimegetcurrent"},(0,n.kt)("inlineCode",{parentName:"a"},"CFAbsoluteTimeGetCurrent")),". Running smaller images (lower than 4k resolution) is much quicker and many algorithms can even run at 60 FPS.")),(0,n.kt)("h3",{id:"avoiding-frame-drops"},"Avoiding Frame-drops"),(0,n.kt)("p",null,"Frame Processors will be ",(0,n.kt)("strong",{parentName:"p"},"synchronously")," called for each frame the Camera sees and have to finish executing before the next frame arrives, otherwise the next frame(s) will be dropped. For a frame rate of ",(0,n.kt)("strong",{parentName:"p"},"30 FPS"),", you have about ",(0,n.kt)("strong",{parentName:"p"},"33ms")," to finish processing frames. Use ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/interfaces/CameraProps#frameprocessorfps"},(0,n.kt)("inlineCode",{parentName:"a"},"frameProcessorFps"))," to throttle the frame processor's FPS. For a QR Code Scanner, ",(0,n.kt)("strong",{parentName:"p"},"5 FPS")," (200ms) might suffice, while a object tracking AI might run at the same frame rate as the Camera itself (e.g. ",(0,n.kt)("strong",{parentName:"p"},"60 FPS")," (16ms))."),(0,n.kt)("h3",{id:"eslint-react-hooks-plugin"},"ESLint react-hooks plugin"),(0,n.kt)("p",null,"If you are using the ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"},"react-hooks ESLint plugin"),", make sure to add ",(0,n.kt)("inlineCode",{parentName:"p"},"useFrameProcessor")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"additionalHooks")," inside your ESLint config. (See ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks#advanced-configuration"},'"advanced configuration"'),")"),(0,n.kt)("h3",{id:"technical"},"Technical"),(0,n.kt)("h4",{id:"frame-processors"},"Frame Processors"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Frame Processors")," are JS functions that will be ",(0,n.kt)("strong",{parentName:"p"},"workletized")," using ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated"),". They are created on a ",(0,n.kt)("strong",{parentName:"p"},"parallel camera thread")," using a separate JavaScript Runtime (",(0,n.kt)("em",{parentName:"p"},'"VisionCamera JS-Runtime"'),") and are ",(0,n.kt)("strong",{parentName:"p"},"invoked synchronously")," (using JSI) without ever going over the bridge. In a ",(0,n.kt)("strong",{parentName:"p"},"Frame Processor")," you can write normal JS code, call back to the React-JS Thread (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"setState"),"), use ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/shared-values/"},"Shared Values")," and call ",(0,n.kt)("strong",{parentName:"p"},"Frame Processor Plugins"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/cf68a4c6476d085ec48fc424a53a96962e0c33f9/example/src/CameraPage.tsx#L199-L203"},(0,n.kt)("strong",{parentName:"a"},"the example Frame Processor")))),(0,n.kt)("h4",{id:"frame-processor-plugins"},"Frame Processor Plugins"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Frame Processor Plugins")," are native functions (written in Objective-C, Swift, C++, Java or Kotlin) that are injected into the VisionCamera JS-Runtime. They can be ",(0,n.kt)("strong",{parentName:"p"},"synchronously called")," from your JS Frame Processors (using JSI) without ever going over the bridge. Because VisionCamera provides an easy-to-use plugin API, you can easily create a ",(0,n.kt)("strong",{parentName:"p"},"Frame Processor Plugin")," yourself. Some examples include ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/ml-kit/vision/barcode-scanning"},"Barcode Scanning"),", ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/ml-kit/vision/face-detection"},"Face Detection"),", ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/ml-kit/vision/image-labeling"},"Image Labeling"),", ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/ml-kit/vision/text-recognition"},"Text Recognition")," and more."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Learn how to ",(0,n.kt)("a",{parentName:"p",href:"frame-processors-plugins-overview"},(0,n.kt)("strong",{parentName:"a"},"create Frame Processor Plugins")),", or check out the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/example/ios/Frame%20Processor%20Plugins/Example%20Plugin%20(Swift)/ExamplePluginSwift.swift"},(0,n.kt)("strong",{parentName:"a"},"example Frame Processor Plugin for iOS"))," or ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/example/android/app/src/main/java/com/mrousavy/camera/example/ExampleFrameProcessorPlugin.java"},(0,n.kt)("strong",{parentName:"a"},"Android")),".")),(0,n.kt)("h4",{id:"the-frame-object"},"The ",(0,n.kt)("inlineCode",{parentName:"h4"},"Frame")," object"),(0,n.kt)("p",null,"The Frame Processor gets called with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Frame")," object, which is a ",(0,n.kt)("strong",{parentName:"p"},"JSI HostObject"),". It holds a reference to the native (C++) Frame Image Buffer (~10 MB in size) and exposes properties such as ",(0,n.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"height"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"bytesPerRow")," and more to JavaScript so you can synchronously access them. The ",(0,n.kt)("inlineCode",{parentName:"p"},"Frame")," object can be passed around in JS, as well as returned from- and passed to a native ",(0,n.kt)("strong",{parentName:"p"},"Frame Processor Plugin"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"See ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/mrousavy/status/1412300883149393921"},(0,n.kt)("strong",{parentName:"a"},"this tweet"))," for more information.")),(0,n.kt)("h3",{id:"disabling-frame-processors"},"Disabling Frame Processors"),(0,n.kt)("p",null,"The Frame Processor API spawns a secondary JavaScript Runtime which consumes a small amount of extra CPU and RAM. Additionally, compile time increases since Frame Processors are written in native C++. If you're not using Frame Processors at all, you can disable them:"),(0,n.kt)(o.Z,{groupId:"environment",defaultValue:"rn",values:[{label:"React Native",value:"rn"},{label:"Expo",value:"expo"}],mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"rn",mdxType:"TabItem"},(0,n.kt)("h4",{id:"android"},"Android"),(0,n.kt)("p",null,"Inside your ",(0,n.kt)("inlineCode",{parentName:"p"},"gradle.properties")," file, add the ",(0,n.kt)("inlineCode",{parentName:"p"},"disableFrameProcessors")," flag:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"disableFrameProcessors=true\n")),(0,n.kt)("p",null,"Then, clean and rebuild your project."),(0,n.kt)("h4",{id:"ios"},"iOS"),(0,n.kt)("p",null,"Inside your ",(0,n.kt)("inlineCode",{parentName:"p"},"project.pbxproj"),", find the ",(0,n.kt)("inlineCode",{parentName:"p"},"GCC_PREPROCESSOR_DEFINITIONS")," group and add the flag:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt",metastring:"{3}","{3}":!0},'GCC_PREPROCESSOR_DEFINITIONS = (\n  "DEBUG=1",\n  "VISION_CAMERA_DISABLE_FRAME_PROCESSORS=1",\n  "$(inherited)",\n);\n')),(0,n.kt)("p",null,"Make sure to add this to your Debug-, as well as your Release-configuration.")),(0,n.kt)(s.Z,{value:"expo",mdxType:"TabItem"},(0,n.kt)("p",null,"Inside your Expo config (",(0,n.kt)("inlineCode",{parentName:"p"},"app.json"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"app.config.json")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"app.config.js"),"), add the ",(0,n.kt)("inlineCode",{parentName:"p"},"disableFrameProcessors")," flag to the ",(0,n.kt)("inlineCode",{parentName:"p"},"react-native-vision-camera")," plugin:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "my app",\n  "plugins": [\n    [\n      "react-native-vision-camera",\n      {\n        // ...\n        "disableFrameProcessors": true\n      }\n    ]\n  ]\n}\n')))),(0,n.kt)("br",null),(0,n.kt)("h4",{id:"-next-section-zooming-or-creating-a-frame-processor-plugin"},"\ud83d\ude80 Next section: ",(0,n.kt)("a",{parentName:"h4",href:"/docs/guides/zooming"},"Zooming")," (or ",(0,n.kt)("a",{parentName:"h4",href:"/docs/guides/frame-processors-plugins-overview"},"creating a Frame Processor Plugin"),")"))}h.isMDXComponent=!0}}]);