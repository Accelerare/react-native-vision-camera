(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[997],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=a.createContext({}),l=function(e){var r=a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},m=function(e){var r=l(e.components);return a.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=n,g=u["".concat(c,".").concat(d)]||u[d]||p[d]||o;return t?a.createElement(g,s(s({ref:r},m),{},{components:t})):a.createElement(g,s({ref:r},m))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3919:function(e,r,t){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function n(e){return void 0!==e&&!a(e)}t.d(r,{b:function(){return a},Z:function(){return n}})},4996:function(e,r,t){"use strict";t.d(r,{C:function(){return o},Z:function(){return s}});var a=t(2263),n=t(3919);function o(){var e=(0,a.default)().siteConfig,r=(e=void 0===e?{}:e).baseUrl,t=void 0===r?"/":r,o=e.url;return{withBaseUrl:function(e,r){return function(e,r,t,a){var o=void 0===a?{}:a,s=o.forcePrependBaseUrl,i=void 0!==s&&s,c=o.absolute,l=void 0!==c&&c;if(!t)return t;if(t.startsWith("#"))return t;if((0,n.b)(t))return t;if(i)return r+t;var m=t.startsWith(r)?t:r+t.replace(/^\//,"");return l?e+m:m}(o,t,e,r)}}}function s(e,r){return void 0===r&&(r={}),(0,o().withBaseUrl)(e,r)}},4257:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var a=t(2122),n=t(9756),o=(t(7294),t(3905)),s=t(4996),i=["components"],c={id:"frame-processors",title:"Frame Processors",sidebar_label:"Frame Processors"},l={unversionedId:"guides/frame-processors",id:"guides/frame-processors",isDocsHomePage:!1,title:"Frame Processors",description:"What are frame processors?",source:"@site/docs/guides/FRAME_PROCESSORS.mdx",sourceDirName:"guides",slug:"/guides/frame-processors",permalink:"/react-native-vision-camera/docs/guides/frame-processors",editUrl:"https://github.com/cuvent/react-native-vision-camera/edit/main/docs/docs/guides/FRAME_PROCESSORS.mdx",version:"current",sidebar_label:"Frame Processors",frontMatter:{id:"frame-processors",title:"Frame Processors",sidebar_label:"Frame Processors"},sidebar:"visionSidebar",previous:{title:"Taking Photos/Recording Videos",permalink:"/react-native-vision-camera/docs/guides/capturing"},next:{title:"Creating Frame Processor Plugins",permalink:"/react-native-vision-camera/docs/guides/frame-processors-plugins-overview"}},m=[{value:"What are frame processors?",id:"what-are-frame-processors",children:[]},{value:"Interacting with Frame Processors",id:"interacting-with-frame-processors",children:[]},{value:"Technical",id:"technical",children:[]},{value:"Using Frame Processor Plugins",id:"using-frame-processor-plugins",children:[]},{value:"Benchmarks",id:"benchmarks",children:[]},{value:"Performance",id:"performance",children:[]},{value:"ESLint react-hooks plugin",id:"eslint-react-hooks-plugin",children:[]},{value:"Disabling Frame Processors",id:"disabling-frame-processors",children:[]}],p={toc:m};function u(e){var r=e.components,t=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("div",null,(0,o.kt)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"283",height:"535",style:{float:"right"}},(0,o.kt)("image",{href:(0,s.Z)("img/frame-processors.gif"),x:"18",y:"33",width:"247",height:"469"}),(0,o.kt)("image",{href:(0,s.Z)("img/frame.png"),width:"283",height:"535"}))),(0,o.kt)("h3",{id:"what-are-frame-processors"},"What are frame processors?"),(0,o.kt)("p",null,"Frame processors are functions that are written in JavaScript (or TypeScript) which can be used to ",(0,o.kt)("strong",{parentName:"p"},'process frames the camera "sees"'),".\nInside those functions you can call ",(0,o.kt)("strong",{parentName:"p"},"Frame Processor Plugins"),", which are high performance native functions specifically designed for certain use-cases."),(0,o.kt)("p",null,"For example, you might want to create a QR code scanner ",(0,o.kt)("strong",{parentName:"p"},"without writing any native code"),", while still ",(0,o.kt)("strong",{parentName:"p"},"achieving native performance"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    'worklet'\n    const qrCodes = scanQRCodes(frame)\n    console.log(`Detected QR Codes: ${qrCodes}`)\n  }, [])\n\n  return (\n    <Camera\n      {...cameraProps}\n      frameProcessor={frameProcessor}\n    />\n  )\n}\n")),(0,o.kt)("p",null,"Frame processors are by far not limited to QR code detection, other examples include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"AI")," for ",(0,o.kt)("strong",{parentName:"li"},"facial recognition")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"AI")," for ",(0,o.kt)("strong",{parentName:"li"},"object detection")),(0,o.kt)("li",{parentName:"ul"},"Using ",(0,o.kt)("strong",{parentName:"li"},"Tensorflow"),", ",(0,o.kt)("strong",{parentName:"li"},"MLKit Vision")," or other libraries"),(0,o.kt)("li",{parentName:"ul"},"Creating ",(0,o.kt)("strong",{parentName:"li"},"realtime video-chats")," using ",(0,o.kt)("strong",{parentName:"li"},"WebRTC")," to directly send the camera frames over the network"),(0,o.kt)("li",{parentName:"ul"},"Creating scanners for QR codes, Barcodes or even custom codes such as Snapchat's SnapCodes or Apple's AppClips"),(0,o.kt)("li",{parentName:"ul"},"Creating ",(0,o.kt)("strong",{parentName:"li"},"snapchat-like filters"),", e.g. draw a dog-mask filter over the user's face"),(0,o.kt)("li",{parentName:"ul"},"Creating ",(0,o.kt)("strong",{parentName:"li"},"color filters")," with depth-detection")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Frame Processors require ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},(0,o.kt)("strong",{parentName:"a"},"react-native-reanimated"))," 2.2.0 or higher."))),(0,o.kt)("h3",{id:"interacting-with-frame-processors"},"Interacting with Frame Processors"),(0,o.kt)("p",null,"Since Frame Processors run in Worklets, you can also easily read from, and assign to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/shared-values"},(0,o.kt)("strong",{parentName:"a"},"Shared Values")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{6}","{6}":!0},"// represents position of the cat on the screen \ud83d\udc08\nconst catBounds = useSharedValue({ top: 0, left: 0, right: 0, bottom: 0 })\n\nconst frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  catBounds.value = scanFrameForCat(frame)\n}, [catBounds])\n\nconst boxOverlayStyle = useAnimatedStyle(() => ({\n  position: 'absolute',\n  borderWidth: 1,\n  borderColor: 'red',\n  ...catBounds.value\n}), [catBounds])\n\nreturn (\n  <View>\n    <Camera {...cameraProps} frameProcessor={frameProcessor} />\n    // draws a red rectangle on the screen which surrounds the cat\n    <Reanimated.View style={boxOverlayStyle} />\n  </View>\n)\n")),(0,o.kt)("p",null,"And you can also call back to the React-JS thread using ",(0,o.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/runOnJS"},(0,o.kt)("inlineCode",{parentName:"a"},"runOnJS")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{9}","{9}":!0},"const onQRCodeDetected = useCallback((qrCode: string) => {\n  navigation.push(\"ProductPage\", { productId: qrCode })\n}, [])\n\nconst frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const qrCodes = scanQRCodes(frame)\n  if (qrCodes.length > 0) {\n    runOnJS(onQRCodeDetected)(qrCodes[0])\n  }\n}, [onQRCodeDetected])\n")),(0,o.kt)("h3",{id:"technical"},"Technical"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Frame Processors")," are JS functions that will be ",(0,o.kt)("strong",{parentName:"li"},"workletized")," using ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated"),". They are created on a ",(0,o.kt)("strong",{parentName:"li"},"custom camera thread")," using a separate JavaScript Runtime (",(0,o.kt)("em",{parentName:"li"},'"VisionCamera JS-Runtime"'),") and are ",(0,o.kt)("strong",{parentName:"li"},"invoked synchronously")," (using JSI) without ever going over the bridge."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Frame Processor Plugins")," are native functions (written in Objective-C, Swift, C++, Java or Kotlin) that are injected into the VisionCamera JS-Runtime. They can be ",(0,o.kt)("strong",{parentName:"li"},"synchronously called")," from your JS Frame Processors (using JSI) without ever going over the bridge.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Learn how to ",(0,o.kt)("a",{parentName:"p",href:"frame-processors-plugins-overview"},(0,o.kt)("strong",{parentName:"a"},"create Frame Processor Plugins")))),(0,o.kt)("h3",{id:"using-frame-processor-plugins"},"Using Frame Processor Plugins"),(0,o.kt)("p",null,"Frame Processor Plugins are distributed through npm. To install the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/vision-camera-qrcode-scanner"},(0,o.kt)("strong",{parentName:"a"},"vision-camera-qrcode-scanner"))," plugin, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i vision-camera-qrcode-scanner\ncd ios && pod install\n")),(0,o.kt)("p",null,"Then add it to your ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.js"),". For the QR Code Scanner, this will be ",(0,o.kt)("inlineCode",{parentName:"p"},"__scanQRCodes"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{6}","{6}":!0},"module.exports = {\n  plugins: [\n    [\n      'react-native-reanimated/plugin',\n      {\n        globals: ['__scanQRCodes'],\n      },\n    ],\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You have to restart metro-bundler for changes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.js")," file to take effect."))),(0,o.kt)("p",null,"That's it! \ud83c\udf89 Now you can use it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame: Frame) => {\n  'worklet'\n  const codes = scanQRCodes(frame)\n  // ...\n}, [])\n")),(0,o.kt)("p",null,"Check out ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/frame-processor-plugin-list"},(0,o.kt)("strong",{parentName:"a"},"Frame Processor community plugins"))," to discover plugins!"),(0,o.kt)("h3",{id:"benchmarks"},"Benchmarks"),(0,o.kt)("p",null,"I have used ",(0,o.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/ml-kit/ios/label-images"},"MLKit Vision Image Labeling")," to label 4k Camera frames in realtime."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fully natively (written in pure Objective-C, no React interaction at all), I have measured an average of ",(0,o.kt)("strong",{parentName:"li"},"68ms")," per call."),(0,o.kt)("li",{parentName:"ul"},"As a Frame Processor Plugin (written in Objective-C, called through a JS Frame Processor function), I have measured an average of ",(0,o.kt)("strong",{parentName:"li"},"69ms")," per call, meaning ",(0,o.kt)("strong",{parentName:"li"},"the Frame Processor API only takes ~1ms longer than a fully native implementation"),", making it ",(0,o.kt)("strong",{parentName:"li"},"the fastest way to run any sort of Frame Processing in React Native"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"All measurements are recorded on an iPhone 11 Pro, benchmarked total execution time of the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/avfoundation/avcapturevideodataoutputsamplebufferdelegate/1385775-captureoutput"},(0,o.kt)("inlineCode",{parentName:"a"},"captureOutput"))," function by using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/corefoundation/1543542-cfabsolutetimegetcurrent"},(0,o.kt)("inlineCode",{parentName:"a"},"CFAbsoluteTimeGetCurrent")),". Running smaller images (lower than 4k resolution) is much quicker and many algorithms can even run at 60 FPS.")),(0,o.kt)("h3",{id:"performance"},"Performance"),(0,o.kt)("p",null,"Frame Processors will be ",(0,o.kt)("strong",{parentName:"p"},"synchronously")," called for each frame the Camera sees and have to finish executing before the next frame arrives, otherwise the next frame(s) will be dropped. For a frame rate of ",(0,o.kt)("strong",{parentName:"p"},"30 FPS"),", you have about ",(0,o.kt)("strong",{parentName:"p"},"33ms")," to finish processing frames. Use ",(0,o.kt)("a",{parentName:"p",href:"../api/interfaces/cameraprops.cameraprops-1#frameprocessorfps"},(0,o.kt)("inlineCode",{parentName:"a"},"frameProcessorFps"))," to throttle the frame processor's FPS. For a QR Code Scanner, ",(0,o.kt)("strong",{parentName:"p"},"5 FPS")," might suffice."),(0,o.kt)("h3",{id:"eslint-react-hooks-plugin"},"ESLint react-hooks plugin"),(0,o.kt)("p",null,"If you are using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"},"react-hooks ESLint plugin"),", make sure to add ",(0,o.kt)("inlineCode",{parentName:"p"},"useFrameProcessor")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"additionalHooks")," inside your ESLint config. (See ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks#advanced-configuration"},'"advanced configuration"'),")"),(0,o.kt)("h3",{id:"disabling-frame-processors"},"Disabling Frame Processors"),(0,o.kt)("p",null,"The Frame Processor API spawns a secondary JavaScript Runtime which consumes a small amount of extra CPU and RAM. If you're not using Frame Processors at all, you can disable them by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"VISION_CAMERA_DISABLE_FRAME_PROCESSORS")," flag. Inside your ",(0,o.kt)("inlineCode",{parentName:"p"},"project.pbxproj"),", find the ",(0,o.kt)("inlineCode",{parentName:"p"},"GCC_PREPROCESSOR_DEFINITIONS")," parameter and add the flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt",metastring:"{3}","{3}":!0},'GCC_PREPROCESSOR_DEFINITIONS = (\n  "DEBUG=1",\n  "VISION_CAMERA_DISABLE_FRAME_PROCESSORS=1",\n  "$(inherited)",\n);\n')),(0,o.kt)("p",null,"Make sure to add this to your Debug-, as well as your Release-configuration."),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"-next-section-zooming-or-creating-a-frame-processor-plugin"},"\ud83d\ude80 Next section: ",(0,o.kt)("a",{parentName:"h4",href:"/docs/guides/zooming"},"Zooming")," (or ",(0,o.kt)("a",{parentName:"h4",href:"/docs/guides/frame-processors-plugins-overview"},"creating a Frame Processor Plugin"),")"))}u.isMDXComponent=!0}}]);