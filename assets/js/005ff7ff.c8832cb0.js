"use strict";(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[550],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=s(a),u=i,h=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=d;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:i,r[1]=m;for(var s=2;s<o;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2093:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var n=a(7462),i=a(3366),o=(a(7294),a(3905)),r=a(4996),m=["components"],l={id:"zooming",title:"Zooming",sidebar_label:"Zooming"},s=void 0,p={unversionedId:"guides/zooming",id:"guides/zooming",title:"Zooming",description:"The ` component already provides a natively implemented zoom gesture which you can enable with the enableZoomGesture` prop. This does not require any additional work, but if you want to setup a custom gesture, such as the one in Snapchat or Instagram where you move up your finger while recording, continue reading.",source:"@site/docs/guides/ZOOMING.mdx",sourceDirName:"guides",slug:"/guides/zooming",permalink:"/docs/guides/zooming",editUrl:"https://github.com/mrousavy/react-native-vision-camera/edit/main/docs/docs/guides/ZOOMING.mdx",tags:[],version:"current",frontMatter:{id:"zooming",title:"Zooming",sidebar_label:"Zooming"},sidebar:"visionSidebar",previous:{title:"Community Plugins",permalink:"/docs/guides/frame-processor-plugin-list"},next:{title:"Focusing",permalink:"/docs/guides/focusing"}},c=[{value:"Animation libraries",id:"animation-libraries",children:[],level:3},{value:"Implementation",id:"implementation",children:[{value:"Overview",id:"overview",children:[],level:4},{value:"Code",id:"code",children:[],level:4}],level:3},{value:"Min, Max and Neutral Zoom",id:"min-max-and-neutral-zoom",children:[],level:3},{value:"Logarithmic scale",id:"logarithmic-scale",children:[],level:3},{value:"Pinch-to-zoom",id:"pinch-to-zoom",children:[{value:"\ud83d\ude80 Next section: Focusing",id:"-next-section-focusing",children:[],level:4}],level:3}],d={toc:c};function u(e){var t=e.components,a=(0,i.Z)(e,m);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",null,(0,o.kt)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"283",height:"535",style:{float:"right"}},(0,o.kt)("image",{href:(0,r.Z)("img/demo.gif"),x:"18",y:"33",width:"247",height:"469"}),(0,o.kt)("image",{href:(0,r.Z)("img/frame.png"),width:"283",height:"535"}))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Camera>")," component already provides a natively implemented zoom gesture which you can enable with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/CameraProps#enablezoomgesture"},(0,o.kt)("inlineCode",{parentName:"a"},"enableZoomGesture"))," prop. This does not require any additional work, but if you want to setup a custom gesture, such as the one in Snapchat or Instagram where you move up your finger while recording, continue reading."),(0,o.kt)("h3",{id:"animation-libraries"},"Animation libraries"),(0,o.kt)("p",null,"While you can use any animation library to animate the ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom")," property (or use no animation library at all) it is recommended to use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated")," (v2) to achieve best performance. Head over to their ",(0,o.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/installation"},"Installation guide")," to install Reanimated if you haven't already."),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("h4",{id:"overview"},"Overview"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Make the Camera View animatable using ",(0,o.kt)("inlineCode",{parentName:"li"},"createAnimatedComponent")),(0,o.kt)("li",{parentName:"ol"},"Make the Camera's ",(0,o.kt)("inlineCode",{parentName:"li"},"zoom")," property animatable using ",(0,o.kt)("inlineCode",{parentName:"li"},"addWhitelistedNativeProps")),(0,o.kt)("li",{parentName:"ol"},"Create a SharedValue using ",(0,o.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/useSharedValue"},(0,o.kt)("inlineCode",{parentName:"a"},"useSharedValue"))," which represents the zoom state (from ",(0,o.kt)("inlineCode",{parentName:"li"},"0")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),")"),(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/useAnimatedProps"},(0,o.kt)("inlineCode",{parentName:"a"},"useAnimatedProps"))," to map the zoom SharedValue to the zoom property."),(0,o.kt)("li",{parentName:"ol"},"We apply the animated props to the ",(0,o.kt)("inlineCode",{parentName:"li"},"ReanimatedCamera")," component's ",(0,o.kt)("inlineCode",{parentName:"li"},"animatedProps")," property.")),(0,o.kt)("h4",{id:"code"},"Code"),(0,o.kt)("p",null,"The following example implements a button which smoothly zooms to a random value using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import Reanimated, {\n  useAnimatedProps,\n  useSharedValue,\n  withSpring,\n} from "react-native-reanimated"\n\nconst ReanimatedCamera = Reanimated.createAnimatedComponent(Camera)\nReanimated.addWhitelistedNativeProps({\n  zoom: true,\n})\n\nexport function App() {\n  const devices = useCameraDevices()\n  const device = devices.back\n  const zoom = useSharedValue(0)\n\n  const onRandomZoomPress = useCallback(() => {\n    zoom.value = withSpring(Math.random())\n  }, [])\n\n  const animatedProps = useAnimatedProps<Partial<CameraProps>>(\n    () => ({ zoom: zoom.value }),\n    [zoom]\n  )\n\n  if (device == null) return <LoadingView />\n  return (\n    <>\n      <ReanimatedCamera\n        style={StyleSheet.absoluteFill}\n        device={device}\n        isActive={true}\n        animatedProps={animatedProps}\n      />\n      <TouchableOpacity\n        style={styles.zoomButton}\n        onPress={onRandomZoomPress}>\n        <Text>Zoom randomly!</Text>\n      </TouchableOpacity>\n    </>\n  )\n}\n')),(0,o.kt)("h3",{id:"min-max-and-neutral-zoom"},"Min, Max and Neutral Zoom"),(0,o.kt)("p",null,"A Camera device has different minimum, maximum and neutral zoom values. Those values are expressed through the ",(0,o.kt)("inlineCode",{parentName:"p"},"CameraDevice"),"'s ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/CameraDevice#minzoom"},(0,o.kt)("inlineCode",{parentName:"a"},"minZoom")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/CameraDevice#maxzoom"},(0,o.kt)("inlineCode",{parentName:"a"},"maxZoom"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/CameraDevice#neutralzoom"},(0,o.kt)("inlineCode",{parentName:"a"},"neutralZoom")),' props, and are represented in "scale". So if the ',(0,o.kt)("inlineCode",{parentName:"p"},"maxZoom")," property of a device is ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),", that means the view can be enlarged by twice it's zoom, aka the viewport halves."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"minZoom")," value is always ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"maxZoom")," value can have very high values (such as ",(0,o.kt)("inlineCode",{parentName:"li"},"128"),"), but often you want to clamp this value to something realistic like ",(0,o.kt)("inlineCode",{parentName:"li"},"16"),"."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"neutralZoom")," value is often ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),", but can be larger than ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),' for devices with "fish-eye" (ultra-wide-angle) cameras. In those cases, the user expects to be at whatever zoom value ',(0,o.kt)("inlineCode",{parentName:"li"},"neutralZoom")," is (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"2"),") per default, and if he tries to zoom out even more, he goes to ",(0,o.kt)("inlineCode",{parentName:"li"},"minZoom")," (",(0,o.kt)("inlineCode",{parentName:"li"},"1"),'), which switches over to the "fish-eye" (ultra-wide-angle) camera as seen in this GIF:')),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"https://developer.android.com/images/training/camera/multi-camera-4.gif",width:"45%"})),(0,o.kt)("p",null,"The Camera's ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom"),' property expects values to be in the same "factor" scale as the ',(0,o.kt)("inlineCode",{parentName:"p"},"minZoom"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"neutralZoom")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"maxZoom")," values - so if you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom={device.minZoom}")," it is at the minimum available zoom, where as if you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom={device.maxZoom}")," the maximum zoom value possible is zoomed in. It is recommended that you start at ",(0,o.kt)("inlineCode",{parentName:"p"},"device.neutralZoom")," and let the user manually zoom out to the fish-eye camera on demand (if available)."),(0,o.kt)("h3",{id:"logarithmic-scale"},"Logarithmic scale"),(0,o.kt)("p",null,"A Camera's ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom")," property is represented in a ",(0,o.kt)("strong",{parentName:"p"},"logarithmic scale"),". That means, increasing from ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," will appear to be a much larger offset than increasing from ",(0,o.kt)("inlineCode",{parentName:"p"},"127")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"128"),". If you want to implement a zoom gesture (",(0,o.kt)("inlineCode",{parentName:"p"},"<PinchGestureHandler>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<PanGestureHandler>"),"), try to flatten the ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom")," property to a ",(0,o.kt)("strong",{parentName:"p"},"linear scale")," by raising it ",(0,o.kt)("strong",{parentName:"p"},"exponentially"),". (",(0,o.kt)("inlineCode",{parentName:"p"},"zoom.value ** 2"),")"),(0,o.kt)("h3",{id:"pinch-to-zoom"},"Pinch-to-zoom"),(0,o.kt)("p",null,"The above example only demonstrates how to animate the ",(0,o.kt)("inlineCode",{parentName:"p"},"zoom")," property. To actually implement pinch-to-zoom or pan-to-zoom, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/tree/main/example"},"VisionCamera example app"),", the pinch-to-zoom gesture can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/example/src/views/CaptureButton.tsx#L189-L208"},"here"),", and the pan-to-zoom gesture can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/d8551792e97eaa6fa768f54059ffce054bf748d9/example/src/views/CaptureButton.tsx#L185-L205"},"here"),". They implement a real world use-case, where the maximum zoom value is clamped to a realistic value, and the zoom responds very gracefully by using a logarithmic scale."),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"-next-section-focusing"},"\ud83d\ude80 Next section: ",(0,o.kt)("a",{parentName:"h4",href:"focusing"},"Focusing")))}u.isMDXComponent=!0}}]);