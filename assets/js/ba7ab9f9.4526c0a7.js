(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[1534],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:i,o[1]=m;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3919:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return i}})},4996:function(e,t,n){"use strict";n.d(t,{C:function(){return r},Z:function(){return o}});var a=n(2263),i=n(3919);function r(){var e=(0,a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var r=void 0===a?{}:a,o=r.forcePrependBaseUrl,m=void 0!==o&&o,l=r.absolute,s=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if((0,i.b)(n))return n;if(m)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return s?e+p:p}(r,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},3533:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=n(4996),m=["components"],l={id:"animated",title:"Zooming with Reanimated",sidebar_label:"Zooming with Reanimated"},s={unversionedId:"guides/animated",id:"guides/animated",isDocsHomePage:!1,title:"Zooming with Reanimated",description:"Animations",source:"@site/docs/guides/ANIMATED.mdx",sourceDirName:"guides",slug:"/guides/animated",permalink:"/react-native-vision-camera/docs/guides/animated",editUrl:"https://github.com/cuvent/react-native-vision-camera/edit/main/docs/docs/guides/ANIMATED.mdx",version:"current",sidebar_label:"Zooming with Reanimated",frontMatter:{id:"animated",title:"Zooming with Reanimated",sidebar_label:"Zooming with Reanimated"},sidebar:"visionSidebar",previous:{title:"Community Plugins",permalink:"/react-native-vision-camera/docs/guides/frame-processor-plugin-list"},next:{title:"Focusing",permalink:"/react-native-vision-camera/docs/guides/focusing"}},p=[{value:"Animations",id:"animations",children:[{value:"Animation libraries",id:"animation-libraries",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"Explanation",id:"explanation",children:[]},{value:"Logarithmic scale",id:"logarithmic-scale",children:[]},{value:"Pinch-to-zoom",id:"pinch-to-zoom",children:[]}]}],c={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,m);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",null,(0,r.kt)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"283",height:"535",style:{float:"right"}},(0,r.kt)("image",{href:(0,o.Z)("img/demo.gif"),x:"18",y:"33",width:"247",height:"469"}),(0,r.kt)("image",{href:(0,o.Z)("img/frame.png"),width:"283",height:"535"}))),(0,r.kt)("h2",{id:"animations"},"Animations"),(0,r.kt)("p",null,"Often you'd want to animate specific props in the Camera. For example, if you'd want to create a custom zoom gesture, you can smoothly animate the Camera's ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom")," property."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Camera>")," component already provides a natively implemented zoom gesture which you can enable with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/cameraprops.cameraprops-1#enablezoomgesture"},(0,r.kt)("inlineCode",{parentName:"a"},"enableZoomGesture"))," prop. This does not require any additional work, but if you want to setup a custom gesture, such as the one in Snapchat or Instagram where you move up your finger while recording, continue reading."),(0,r.kt)("h3",{id:"animation-libraries"},"Animation libraries"),(0,r.kt)("p",null,"While you can use any animation library to animate the ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom")," property (or use no animation library at all) it is recommended to use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated")," (v2) to achieve best performance. Head over to their ",(0,r.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/installation"},"Installation guide")," to install Reanimated if you haven't already."),(0,r.kt)("h3",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"The following example implements a button which smoothly zooms to a random value using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated"},"react-native-reanimated"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import Reanimated, {\n  useAnimatedProps,\n  useSharedValue,\n  withSpring,\n} from "react-native-reanimated"\n\nconst ReanimatedCamera = Reanimated.createAnimatedComponent(Camera)\nReanimated.addWhitelistedNativeProps({\n  zoom: true,\n})\n\nexport function App() {\n  const devices = useCameraDevices()\n  const device = devices.back\n  const zoom = useSharedValue(0)\n\n  const onRandomZoomPress = useCallback(() => {\n    zoom.value = withSpring(Math.random())\n  }, [])\n\n  const animatedProps = useAnimatedProps<Partial<CameraProps>>(\n    () => ({ zoom: zoom.value }),\n    [zoom]\n  )\n\n  if (device == null) return <LoadingView />\n  return (\n    <>\n      <ReanimatedCamera\n        style={StyleSheet.absoluteFill}\n        device={device}\n        isActive={true}\n        animatedProps={animatedProps}\n      />\n      <TouchableOpacity\n        style={styles.zoomButton}\n        onPress={onRandomZoomPress}>\n        <Text>Zoom randomly!</Text>\n      </TouchableOpacity>\n    </>\n  )\n}\n')),(0,r.kt)("h3",{id:"explanation"},"Explanation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Camera")," was made animatable using ",(0,r.kt)("inlineCode",{parentName:"li"},"Reanimated.createAnimatedComponent")),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"zoom")," property is added to the whitelisted native props to make it animatable.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note that this might not be needed in the future, see: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated/pull/1409"},"reanimated#1409")))),(0,r.kt)("li",{parentName:"ol"},"Using ",(0,r.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/useSharedValue"},(0,r.kt)("inlineCode",{parentName:"a"},"useSharedValue")),", we're creating a shared value that holds the value for the ",(0,r.kt)("inlineCode",{parentName:"li"},"zoom")," property."),(0,r.kt)("li",{parentName:"ol"},"Using the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/useAnimatedProps"},(0,r.kt)("inlineCode",{parentName:"a"},"useAnimatedProps"))," hook, we apply the shared value to Camera's ",(0,r.kt)("inlineCode",{parentName:"li"},"zoom")," property."),(0,r.kt)("li",{parentName:"ol"},"We apply the animated props to the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReanimatedCamera")," component's ",(0,r.kt)("inlineCode",{parentName:"li"},"animatedProps")," property.")),(0,r.kt)("h3",{id:"logarithmic-scale"},"Logarithmic scale"),(0,r.kt)("p",null,"A Camera's ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom")," property is represented in a ",(0,r.kt)("strong",{parentName:"p"},"logarithmic scale"),". That means, increasing from ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1")," will appear to be a much larger offset than increasing from ",(0,r.kt)("inlineCode",{parentName:"p"},"0.9")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),". If you want to implement a zoom gesture (",(0,r.kt)("inlineCode",{parentName:"p"},"<PinchGestureHandler>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<PanGestureHandler>"),"), try to flatten the ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom")," property to a ",(0,r.kt)("strong",{parentName:"p"},"linear scale")," by raising it ",(0,r.kt)("strong",{parentName:"p"},"exponentially"),". (",(0,r.kt)("inlineCode",{parentName:"p"},"zoom.value ** 2"),")"),(0,r.kt)("h3",{id:"pinch-to-zoom"},"Pinch-to-zoom"),(0,r.kt)("p",null,"The above example only demonstrates how to animate the ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom")," property. To actually implement pinch-to-zoom or pan-to-zoom, take a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/tree/main/example"},"VisionCamera example app"),", the pinch-to-zoom gesture can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/d8551792e97eaa6fa768f54059ffce054bf748d9/example/src/CameraPage.tsx#L162-L176"},"here"),", and the pan-to-zoom gesture can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/d8551792e97eaa6fa768f54059ffce054bf748d9/example/src/views/CaptureButton.tsx#L185-L205"},"here"),". They implement a real world use-case, where the maximum zoom value is clamped to a realistic value, and the zoom responds very gracefully by using a logarithmic scale."),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"-next-section-focusing"},"\ud83d\ude80 Next section: ",(0,r.kt)("a",{parentName:"h4",href:"focusing"},"Focusing")))}u.isMDXComponent=!0}}]);