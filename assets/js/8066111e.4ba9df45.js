(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[881],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return s},kt:function(){return k}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function m(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):m(m({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(a),k=n,f=d["".concat(o,".").concat(k)]||d[k]||c[k]||i;return a?r.createElement(f,m(m({ref:t},s),{},{components:a})):r.createElement(f,m({ref:t},s))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,m=new Array(i);m[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,m[1]=l;for(var p=2;p<i;p++)m[p]=a[p];return r.createElement.apply(null,m)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6223:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return m},metadata:function(){return l},toc:function(){return o},default:function(){return s}});var r=a(2122),n=a(9756),i=(a(7294),a(3905)),m={id:"utils_formatfilter",title:"Module: utils/FormatFilter",sidebar_label:"utils/FormatFilter",custom_edit_url:null},l={unversionedId:"api/modules/utils_formatfilter",id:"api/modules/utils_formatfilter",isDocsHomePage:!1,title:"Module: utils/FormatFilter",description:"Type aliases",source:"@site/docs/api/modules/utils_formatfilter.md",sourceDirName:"api/modules",slug:"/api/modules/utils_formatfilter",permalink:"/react-native-vision-camera/docs/api/modules/utils_formatfilter",editUrl:null,version:"current",sidebar_label:"utils/FormatFilter",frontMatter:{id:"utils_formatfilter",title:"Module: utils/FormatFilter",sidebar_label:"utils/FormatFilter",custom_edit_url:null},sidebar:"visionSidebar",previous:{title:"Module: hooks/useFrameProcessor",permalink:"/react-native-vision-camera/docs/api/modules/hooks_useframeprocessor"},next:{title:"Class: Camera",permalink:"/react-native-vision-camera/docs/api/classes/camera.camera-1"}},o=[{value:"Type aliases",id:"type-aliases",children:[{value:"Size",id:"size",children:[]}]},{value:"Functions",id:"functions",children:[{value:"filterFormatsByAspectRatio",id:"filterformatsbyaspectratio",children:[]},{value:"frameRateIncluded",id:"framerateincluded",children:[]},{value:"sortDevices",id:"sortdevices",children:[]},{value:"sortFormatsByResolution",id:"sortformatsbyresolution",children:[]}]}],p={toc:o};function s(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"type-aliases"},"Type aliases"),(0,i.kt)("h3",{id:"size"},"Size"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"Size"),": ",(0,i.kt)("em",{parentName:"p"},"object")),(0,i.kt)("p",null,"Represents a Size in any unit."),(0,i.kt)("h4",{id:"type-declaration"},"Type declaration:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"height")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Points in height.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"width")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Points in width.")))),(0,i.kt)("p",null,"Defined in: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/fb88603/src/utils/FormatFilter.ts#L36"},"utils/FormatFilter.ts:36")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"filterformatsbyaspectratio"},"filterFormatsByAspectRatio"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const"),(0,i.kt)("strong",{parentName:"p"},"filterFormatsByAspectRatio"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"formats"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"[], ",(0,i.kt)("inlineCode",{parentName:"p"},"viewSize?"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/utils_formatfilter#size"},(0,i.kt)("em",{parentName:"a"},"Size")),"): ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),(0,i.kt)("p",null,"Filters Camera Device Formats by the best matching aspect ratio for the given ",(0,i.kt)("inlineCode",{parentName:"p"},"viewSize"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const formats = useMemo(() => filterFormatsByAspectRatio(device.formats, CAMERA_VIEW_SIZE), [device.formats])\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"method"))," "),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"formats")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"A list of formats the current device has (see ",(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1#formats"},(0,i.kt)("inlineCode",{parentName:"a"},"CameraDevice.formats")),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"viewSize")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/modules/utils_formatfilter#size"},(0,i.kt)("em",{parentName:"a"},"Size"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The size of the camera view which will be used to find the best aspect ratio. Defaults to the screen size.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),(0,i.kt)("p",null,"A list of Camera Device Formats that match the given ",(0,i.kt)("inlineCode",{parentName:"p"},"viewSize"),"' aspect ratio ",(0,i.kt)("em",{parentName:"p"},"as close as possible"),"."),(0,i.kt)("p",null,"Defined in: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/fb88603/src/utils/FormatFilter.ts#L92"},"utils/FormatFilter.ts:92")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"framerateincluded"},"frameRateIncluded"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const"),(0,i.kt)("strong",{parentName:"p"},"frameRateIncluded"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"range"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.frameraterange"},(0,i.kt)("em",{parentName:"a"},"FrameRateRange")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fps"),": ",(0,i.kt)("em",{parentName:"p"},"number"),"): ",(0,i.kt)("em",{parentName:"p"},"boolean")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the given Frame Rate Range (",(0,i.kt)("inlineCode",{parentName:"p"},"range"),") contains the given frame rate (",(0,i.kt)("inlineCode",{parentName:"p"},"fps"),")"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// get all formats that support 60 FPS\nconst formatsWithHighFps = useMemo(() => device.formats.filter((f) => f.frameRateRanges.some((r) => frameRateIncluded(r, 60))), [device.formats])\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"method"))," "),(0,i.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"range")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.frameraterange"},(0,i.kt)("em",{parentName:"a"},"FrameRateRange"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The range to check if the given ",(0,i.kt)("inlineCode",{parentName:"td"},"fps")," are included in")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fps")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The FPS to check if the given ",(0,i.kt)("inlineCode",{parentName:"td"},"range")," supports.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("em",{parentName:"p"},"boolean")),(0,i.kt)("p",null,"Defined in: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/fb88603/src/utils/FormatFilter.ts#L142"},"utils/FormatFilter.ts:142")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"sortdevices"},"sortDevices"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const"),(0,i.kt)("strong",{parentName:"p"},"sortDevices"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"left"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},(0,i.kt)("em",{parentName:"a"},"CameraDevice")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},(0,i.kt)("em",{parentName:"a"},"CameraDevice")),"): ",(0,i.kt)("em",{parentName:"p"},"number")),(0,i.kt)("p",null,"Compares two devices by the following criteria:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wide-angle-camera"),"s are ranked higher than others"),(0,i.kt)("li",{parentName:"ul"},'Devices with more physical cameras are ranked higher than ones with less. (e.g. "Triple Camera" > "Wide-Angle Camera")')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that this makes the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort()")," function descending, so the first element (",(0,i.kt)("inlineCode",{parentName:"p"},"[0]"),') is the "best" device.')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const devices = camera.devices.sort(sortDevices)\nconst bestDevice = devices[0]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"method"))," "),(0,i.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"left")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},(0,i.kt)("em",{parentName:"a"},"CameraDevice")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"right")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},(0,i.kt)("em",{parentName:"a"},"CameraDevice")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("em",{parentName:"p"},"number")),(0,i.kt)("p",null,"Defined in: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/fb88603/src/utils/FormatFilter.ts#L18"},"utils/FormatFilter.ts:18")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"sortformatsbyresolution"},"sortFormatsByResolution"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const"),(0,i.kt)("strong",{parentName:"p"},"sortFormatsByResolution"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"left"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),": ",(0,i.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"): ",(0,i.kt)("em",{parentName:"p"},"number")),(0,i.kt)("p",null,"Sorts Camera Device Formats by highest photo-capture resolution, descending. Use this in a ",(0,i.kt)("inlineCode",{parentName:"p"},".sort")," function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const formats = useMemo(() => device.formats.sort(sortFormatsByResolution), [device.formats])\nconst bestFormat = formats[0]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"method"))," "),(0,i.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"left")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"right")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,i.kt)("em",{parentName:"a"},"CameraDeviceFormat")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("em",{parentName:"p"},"number")),(0,i.kt)("p",null,"Defined in: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/fb88603/src/utils/FormatFilter.ts#L117"},"utils/FormatFilter.ts:117")))}s.isMDXComponent=!0}}]);