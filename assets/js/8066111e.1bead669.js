(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{124:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),o=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},p=function(e){var t=o(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),p=o(a),d=r,O=p["".concat(c,".").concat(d)]||p[d]||s[d]||i;return a?n.a.createElement(O,b(b({ref:t},l),{},{components:a})):n.a.createElement(O,b({ref:t},l))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,c=new Array(i);c[0]=d;var b={};for(var m in t)hasOwnProperty.call(t,m)&&(b[m]=t[m]);b.originalType=e,b.mdxType="string"==typeof e?e:r,c[1]=b;for(var l=2;l<i;l++)c[l]=a[l];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},99:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return m})),a.d(t,"default",(function(){return o}));var r=a(3),n=a(7),i=(a(0),a(124)),c={id:"utils_formatfilter",title:"Module: utils/FormatFilter",sidebar_label:"utils/FormatFilter",custom_edit_url:null,hide_title:!0},b={unversionedId:"api/modules/utils_formatfilter",id:"api/modules/utils_formatfilter",isDocsHomePage:!1,title:"Module: utils/FormatFilter",description:"Module: utils/FormatFilter",source:"@site/docs/api/modules/utils_formatfilter.md",slug:"/api/modules/utils_formatfilter",permalink:"/react-native-vision-camera/docs/api/modules/utils_formatfilter",editUrl:null,version:"current",sidebar_label:"utils/FormatFilter",sidebar:"someSidebar",previous:{title:"Module: hooks/useCameraFormat",permalink:"/react-native-vision-camera/docs/api/modules/hooks_usecameraformat"},next:{title:"Class: Camera",permalink:"/react-native-vision-camera/docs/api/classes/camera.camera-1"}},m=[{value:"Type aliases",id:"type-aliases",children:[{value:"Size",id:"size",children:[]}]},{value:"Functions",id:"functions",children:[{value:"filterFormatsByAspectRatio",id:"filterformatsbyaspectratio",children:[]},{value:"frameRateIncluded",id:"framerateincluded",children:[]},{value:"sortDevices",id:"sortdevices",children:[]},{value:"sortFormatsByResolution",id:"sortformatsbyresolution",children:[]}]}],l={toc:m};function o(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"module-utilsformatfilter"},"Module: utils/FormatFilter"),Object(i.b)("h2",{id:"type-aliases"},"Type aliases"),Object(i.b)("h3",{id:"size"},"Size"),Object(i.b)("p",null,"\u01ac ",Object(i.b)("strong",{parentName:"p"},"Size"),": ",Object(i.b)("em",{parentName:"p"},"object")),Object(i.b)("p",null,"Represents a Size in any unit."),Object(i.b)("h4",{id:"type-declaration"},"Type declaration:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"height")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number")),Object(i.b)("td",{parentName:"tr",align:"left"},"Points in height.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"width")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number")),Object(i.b)("td",{parentName:"tr",align:"left"},"Points in width.")))),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/dff8fc7/src/utils/FormatFilter.ts#L36"},"utils/FormatFilter.ts:36")),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("h3",{id:"filterformatsbyaspectratio"},"filterFormatsByAspectRatio"),Object(i.b)("p",null,"\u25b8 ",Object(i.b)("inlineCode",{parentName:"p"},"Const"),Object(i.b)("strong",{parentName:"p"},"filterFormatsByAspectRatio"),"(",Object(i.b)("inlineCode",{parentName:"p"},"formats"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[], ",Object(i.b)("inlineCode",{parentName:"p"},"viewSize?"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/utils_formatfilter#size"},Object(i.b)("em",{parentName:"a"},"Size")),"): ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),Object(i.b)("p",null,"Filters Camera Device Formats by the best matching aspect ratio for the given ",Object(i.b)("inlineCode",{parentName:"p"},"viewSize"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"example"))," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const formats = useMemo(() => filterFormatsByAspectRatio(device.formats, CAMERA_VIEW_SIZE), [device.formats])\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"method"))," "),Object(i.b)("h4",{id:"parameters"},"Parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"formats")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),Object(i.b)("td",{parentName:"tr",align:"left"},"A list of formats the current device has (see ",Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1#formats"},Object(i.b)("inlineCode",{parentName:"a"},"CameraDevice.formats")),")")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"viewSize")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/modules/utils_formatfilter#size"},Object(i.b)("em",{parentName:"a"},"Size"))),Object(i.b)("td",{parentName:"tr",align:"left"},"The size of the camera view which will be used to find the best aspect ratio. Defaults to the screen size.")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns:")," ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),Object(i.b)("p",null,"A list of Camera Device Formats that match the given ",Object(i.b)("inlineCode",{parentName:"p"},"viewSize"),"' aspect ratio ",Object(i.b)("em",{parentName:"p"},"as close as possible"),"."),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/dff8fc7/src/utils/FormatFilter.ts#L92"},"utils/FormatFilter.ts:92")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"framerateincluded"},"frameRateIncluded"),Object(i.b)("p",null,"\u25b8 ",Object(i.b)("inlineCode",{parentName:"p"},"Const"),Object(i.b)("strong",{parentName:"p"},"frameRateIncluded"),"(",Object(i.b)("inlineCode",{parentName:"p"},"range"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.frameraterange"},Object(i.b)("em",{parentName:"a"},"FrameRateRange")),", ",Object(i.b)("inlineCode",{parentName:"p"},"fps"),": ",Object(i.b)("em",{parentName:"p"},"number"),"): ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Returns ",Object(i.b)("inlineCode",{parentName:"p"},"true")," if the given Frame Rate Range (",Object(i.b)("inlineCode",{parentName:"p"},"range"),") contains the given frame rate (",Object(i.b)("inlineCode",{parentName:"p"},"fps"),")"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"example"))," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"// get all formats that support 60 FPS\nconst formatsWithHighFps = useMemo(() => device.formats.filter((f) => f.frameRateRanges.some((r) => frameRateIncluded(r, 60))), [device.formats])\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"method"))," "),Object(i.b)("h4",{id:"parameters-1"},"Parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"range")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.frameraterange"},Object(i.b)("em",{parentName:"a"},"FrameRateRange"))),Object(i.b)("td",{parentName:"tr",align:"left"},"The range to check if the given ",Object(i.b)("inlineCode",{parentName:"td"},"fps")," are included in")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"fps")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number")),Object(i.b)("td",{parentName:"tr",align:"left"},"The FPS to check if the given ",Object(i.b)("inlineCode",{parentName:"td"},"range")," supports.")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns:")," ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/dff8fc7/src/utils/FormatFilter.ts#L137"},"utils/FormatFilter.ts:137")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"sortdevices"},"sortDevices"),Object(i.b)("p",null,"\u25b8 ",Object(i.b)("inlineCode",{parentName:"p"},"Const"),Object(i.b)("strong",{parentName:"p"},"sortDevices"),"(",Object(i.b)("inlineCode",{parentName:"p"},"left"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},Object(i.b)("em",{parentName:"a"},"CameraDevice")),", ",Object(i.b)("inlineCode",{parentName:"p"},"right"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},Object(i.b)("em",{parentName:"a"},"CameraDevice")),"): ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Compares two devices by the following criteria:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"wide-angle-camera"),"s are ranked higher than others"),Object(i.b)("li",{parentName:"ul"},'Devices with more physical cameras are ranked higher than ones with less. (e.g. "Triple Camera" > "Wide-Angle Camera")')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note that this makes the ",Object(i.b)("inlineCode",{parentName:"p"},"sort()")," function descending, so the first element (",Object(i.b)("inlineCode",{parentName:"p"},"[0]"),') is the "best" device.')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"example"))," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const devices = camera.devices.sort(sortDevices)\nconst bestDevice = devices[0]\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"method"))," "),Object(i.b)("h4",{id:"parameters-2"},"Parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"left")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},Object(i.b)("em",{parentName:"a"},"CameraDevice")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"right")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1"},Object(i.b)("em",{parentName:"a"},"CameraDevice")))))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns:")," ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/dff8fc7/src/utils/FormatFilter.ts#L18"},"utils/FormatFilter.ts:18")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"sortformatsbyresolution"},"sortFormatsByResolution"),Object(i.b)("p",null,"\u25b8 ",Object(i.b)("inlineCode",{parentName:"p"},"Const"),Object(i.b)("strong",{parentName:"p"},"sortFormatsByResolution"),"(",Object(i.b)("inlineCode",{parentName:"p"},"left"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),", ",Object(i.b)("inlineCode",{parentName:"p"},"right"),": ",Object(i.b)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")),"): ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Sorts Camera Device Formats by highest photo-capture resolution, descending. Use this in a ",Object(i.b)("inlineCode",{parentName:"p"},".sort")," function."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"example"))," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const formats = useMemo(() => device.formats.sort(sortFormatsByResolution), [device.formats])\nconst bestFormat = formats[0]\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"method"))," "),Object(i.b)("h4",{id:"parameters-3"},"Parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"left")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"right")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},Object(i.b)("em",{parentName:"a"},"CameraDeviceFormat")))))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns:")," ",Object(i.b)("em",{parentName:"p"},"number")),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/dff8fc7/src/utils/FormatFilter.ts#L112"},"utils/FormatFilter.ts:112")))}o.isMDXComponent=!0}}]);