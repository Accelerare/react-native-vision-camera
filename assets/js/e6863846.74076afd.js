"use strict";(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[191],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return g}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),u=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=n,g=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return r?a.createElement(g,s(s({ref:t},c),{},{components:r})):a.createElement(g,s({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:n,s[1]=l;for(var u=2;u<o;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return s}});var a=r(7294),n=r(6010),o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:r,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(o.tabItem,s),hidden:r},t)}},4866:function(e,t,r){r.d(t,{Z:function(){return N}});var a=r(3117),n=r(7294),o=r(6010),s=r(2466),l=r(6550),i=r(1980),u=r(7392),c=r(12);function m(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function p(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??m(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:r}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,o=p(e),[s,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,u]=g({queryString:r,groupId:a}),[m,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),v=(()=>{const e=i??m;return d({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var v=r(2389),h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:r,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),p=e=>{const t=e.currentTarget,r=c.indexOf(t),a=u[r].value;a!==l&&(m(t),i(a))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:s}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:p},s,{className:(0,o.Z)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":l===t})}),r??t)})))}function b(e){let{lazy:t,children:r,selectedValue:a}=e;if(r=Array.isArray(r)?r:[r],t){const e=r.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=f(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},n.createElement(k,(0,a.Z)({},e,t)),n.createElement(b,(0,a.Z)({},e,t)))}function N(e){const t=(0,v.Z)();return n.createElement(y,(0,a.Z)({key:String(t)},e))}},4237:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var a=r(3117),n=(r(7294),r(3905)),o=r(4996);r(4866),r(5162);const s={id:"frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",sidebar_label:"Overview"},l=void 0,i={unversionedId:"guides/frame-processors-plugins-overview",id:"guides/frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",description:"Overview",source:"@site/docs/guides/FRAME_PROCESSORS_CREATE_OVERVIEW.mdx",sourceDirName:"guides",slug:"/guides/frame-processors-plugins-overview",permalink:"/docs/guides/frame-processors-plugins-overview",draft:!1,editUrl:"https://github.com/mrousavy/react-native-vision-camera/edit/main/docs/docs/guides/FRAME_PROCESSORS_CREATE_OVERVIEW.mdx",tags:[],version:"current",frontMatter:{id:"frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",sidebar_label:"Overview"},sidebar:"visionSidebar",previous:{title:"Frame Processors",permalink:"/docs/guides/frame-processors"},next:{title:"Creating Frame Processor Plugins (iOS)",permalink:"/docs/guides/frame-processors-plugins-ios"}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Types",id:"types",level:3},{value:"Return values",id:"return-values",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"What&#39;s possible?",id:"whats-possible",level:2},{value:"Implementations",id:"implementations",level:2},{value:"Long-running Frame Processors",id:"long-running-frame-processors",level:3},{value:"Async Frame Processors with Event Emitters",id:"async-frame-processors-with-event-emitters",level:3},{value:"Benchmarking Frame Processor Plugins",id:"benchmarking-frame-processor-plugins",level:3},{value:"\ud83d\ude80 Create your first Frame Processor Plugin for iOS or Android!",id:"-create-your-first-frame-processor-plugin-for-ios-or-android",level:4}],m={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Frame Processor Plugins are ",(0,n.kt)("strong",{parentName:"p"},"native functions")," which can be directly called from a JS Frame Processor. (See ",(0,n.kt)("a",{parentName:"p",href:"frame-processors"},'"Frame Processors"'),")"),(0,n.kt)("p",null,"They ",(0,n.kt)("strong",{parentName:"p"},"receive a frame from the Camera")," as an input and can return any kind of output. For example, a ",(0,n.kt)("inlineCode",{parentName:"p"},"scanQRCodes")," function returns an array of detected QR code strings in the frame:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{4-5}","{4-5}":!0},"function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    'worklet'\n    const qrCodes = scanQRCodes(frame)\n    console.log(`QR Codes in Frame: ${qrCodes}`)\n  }, [])\n\n  return (\n    <Camera frameProcessor={frameProcessor} {...cameraProps} />\n  )\n}\n")),(0,n.kt)("p",null,"To achieve ",(0,n.kt)("strong",{parentName:"p"},"maximum performance"),", the ",(0,n.kt)("inlineCode",{parentName:"p"},"scanQRCodes")," function is written in a native language (e.g. Objective-C), but it will be directly called from the VisionCamera Frame Processor JavaScript-Runtime."),(0,n.kt)("h3",{id:"types"},"Types"),(0,n.kt)("p",null,"Similar to a TurboModule, the Frame Processor Plugin Registry API automatically manages type conversion from JS <-> native. They are converted into the most efficient data-structures, as seen here:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"JS Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Objective-C/Swift Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Java/Kotlin Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NSNumber*")," (double)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Double"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NSNumber*")," (boolean)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Boolean"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NSString*")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"String"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NSArray*")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ReadableNativeArray"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NSDictionary*")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ReadableNativeMap"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"undefined")," / ",(0,n.kt)("inlineCode",{parentName:"td"},"null")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"nil")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"null"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"(any, any) => void")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/facebook/react-native/blob/9a43eac7a32a6ba3164a048960101022a92fcd5a/React/Base/RCTBridgeModule.h#L20-L24"},(0,n.kt)("inlineCode",{parentName:"a"},"RCTResponseSenderBlock"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"(Object, Object) -> void"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/src/Frame.ts"},(0,n.kt)("inlineCode",{parentName:"a"},"Frame"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/ios/Frame%20Processor/Frame.h"},(0,n.kt)("inlineCode",{parentName:"a"},"Frame*"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://developer.android.com/reference/androidx/camera/core/ImageProxy"},(0,n.kt)("inlineCode",{parentName:"a"},"ImageProxy")))))),(0,n.kt)("h3",{id:"return-values"},"Return values"),(0,n.kt)("p",null,"Return values will automatically be converted to JS values, assuming they are representable in the ",(0,n.kt)("a",{parentName:"p",href:"#types"},'"Types" table'),". So the following Java Frame Processor Plugin:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  return "cat";\n}\n')),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," in JS:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"export function detectObject(frame: Frame): string {\n  'worklet'\n  const result = __detectObject(frame)\n  console.log(result) // <-- \"cat\"\n}\n")),(0,n.kt)("p",null,"You can also manipulate the buffer and return it (or a copy of it) by returning a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/ios/Frame%20Processor/Frame.h"},(0,n.kt)("inlineCode",{parentName:"a"},"Frame")),"/",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/camera/core/ImageProxy"},(0,n.kt)("inlineCode",{parentName:"a"},"ImageProxy"))," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  ImageProxy resizedImage = new ImageProxy(/* ... */);\n  return resizedImage;\n}\n")),(0,n.kt)("p",null,"Which returns a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/src/Frame.ts"},(0,n.kt)("inlineCode",{parentName:"a"},"Frame"))," in JS:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet';\n  // creates a new `Frame` that's 720x480\n  const resizedFrame = resize(frame, 720, 480)\n\n  // by downscaling the frame, the `detectObjects` function runs faster.\n  const objects = detectObjects(resizedFrame)\n  console.log(objects)\n}, [])\n")),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,"Frame Processors can also accept parameters, following the same type convention as ",(0,n.kt)("a",{parentName:"p",href:"#return-values"},"return values"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const codes = scanCodes(frame, ['qr', 'barcode'])\n}, [])\n")),(0,n.kt)("p",null,'Or with multiple ("variadic") parameters:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const codes = scanCodes(frame, true, 'hello-world', 42)\n}, [])\n")),(0,n.kt)("h3",{id:"exceptions"},"Exceptions"),(0,n.kt)("p",null,"To let the user know that something went wrong you can use Exceptions:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  if (params[0] instanceof String) {\n    // ...\n  } else {\n    throw new Exception("First argument has to be a string!");\n  }\n}\n')),(0,n.kt)("p",null,"Which will throw a JS-error:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  try {\n    const codes = scanCodes(frame, true)\n  } catch (e) {\n    console.log(`Error: ${e.message}`)\n  }\n}, [])\n")),(0,n.kt)("h2",{id:"whats-possible"},"What's possible?"),(0,n.kt)("p",null,"You can run any native code you want in a Frame Processor Plugin. Just like in the native iOS and Android Camera APIs, you will receive a frame (",(0,n.kt)("inlineCode",{parentName:"p"},"CMSampleBuffer")," on iOS, ",(0,n.kt)("inlineCode",{parentName:"p"},"ImageProxy")," on Android) which you can use however you want. In other words; ",(0,n.kt)("strong",{parentName:"p"},"everything is possible"),"."),(0,n.kt)("h2",{id:"implementations"},"Implementations"),(0,n.kt)("h3",{id:"long-running-frame-processors"},"Long-running Frame Processors"),(0,n.kt)("p",null,"If your Frame Processor takes longer than a single frame interval to execute, or runs asynchronously, you can create a ",(0,n.kt)("strong",{parentName:"p"},"copy of the frame")," and dispatch the actual frame processing to a ",(0,n.kt)("strong",{parentName:"p"},"separate thread"),"."),(0,n.kt)("p",null,"For example, a realtime video chat application might use WebRTC to send the frames to the server. I/O operations (networking) are asynchronous, and we don't ",(0,n.kt)("em",{parentName:"p"},"need")," to wait for the upload to succeed before pushing the next frame, so we copy the frame and perform the upload on another Thread."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  String serverURL = (String)params[0];\n  ImageProxy imageCopy = new ImageProxy(/* ... */);\n\n  uploaderQueue.runAsync(() -> {\n    WebRTC.uploadImage(imageCopy, serverURL);\n    imageCopy.close();\n  });\n\n  return null;\n}\n")),(0,n.kt)("h3",{id:"async-frame-processors-with-event-emitters"},"Async Frame Processors with Event Emitters"),(0,n.kt)("p",null,"You might also run some very complex AI algorithms which are not fast enough to smoothly run at ",(0,n.kt)("strong",{parentName:"p"},"30 FPS")," (",(0,n.kt)("strong",{parentName:"p"},"33ms"),'). To not drop any frames you can create a custom "frame queue" which processes the copied frames and calls back into JS via a React event emitter. For this you\'ll have to create a Native Module that handles the asynchronous native -> JS communication, see ',(0,n.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/native-modules-android#sending-events-to-javascript"},'"Sending events to JavaScript" (Android)')," and ",(0,n.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/native-modules-ios#sending-events-to-javascript"},'"Sending events to JavaScript" (iOS)'),"."),(0,n.kt)("p",null,"This might look like this for the user:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    'worklet'\n    SomeAI.process(frame) // does not block frame processor, runs async\n  }, [])\n\n  useEffect(() => {\n    SomeAI.addListener((results) => {\n      // gets called asynchronously, goes through the React Event Emitter system\n      console.log(`AI results: ${results}`)\n    })\n  }, [])\n\n  return (\n    <Camera frameProcessor={frameProcessor} {...cameraProps} />\n  )\n}\n")),(0,n.kt)("p",null,"This way you can handle queueing up the frames yourself and asynchronously call back into JS at some later point in time using event emitters."),(0,n.kt)("h3",{id:"benchmarking-frame-processor-plugins"},"Benchmarking Frame Processor Plugins"),(0,n.kt)("p",null,"Your Frame Processor Plugins have to be fast. VisionCamera automatically detects slow Frame Processors and outputs relevant information in the native console (Xcode: ",(0,n.kt)("strong",{parentName:"p"},"Debug Area"),", Android Studio: ",(0,n.kt)("strong",{parentName:"p"},"Logcat"),"):"),(0,n.kt)("div",{align:"center"},(0,n.kt)("img",{src:(0,o.Z)("img/slow-log.png"),width:"80%"})),(0,n.kt)("div",{align:"center"},(0,n.kt)("img",{src:(0,o.Z)("img/slow-log-2.png"),width:"80%"})),(0,n.kt)("br",null),(0,n.kt)("h4",{id:"-create-your-first-frame-processor-plugin-for-ios-or-android"},"\ud83d\ude80 Create your first Frame Processor Plugin for ",(0,n.kt)("a",{parentName:"h4",href:"frame-processors-plugins-ios"},"iOS")," or ",(0,n.kt)("a",{parentName:"h4",href:"frame-processors-plugins-android"},"Android"),"!"))}d.isMDXComponent=!0}}]);