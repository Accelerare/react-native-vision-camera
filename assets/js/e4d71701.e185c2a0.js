(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[9505],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return l},kt:function(){return h}});var r=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,r,i=function(e,a){if(null==e)return{};var t,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},l=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),h=i,v=u["".concat(s,".").concat(h)]||u[h]||m[h]||n;return t?r.createElement(v,o(o({ref:a},l),{},{components:t})):r.createElement(v,o({ref:a},l))}));function h(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var n=t.length,o=new Array(n);o[0]=u;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var p=2;p<n;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6975:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s},default:function(){return l}});var r=t(2122),i=t(9756),n=(t(7294),t(3905)),o={id:"cameradevice.cameradevice-1",title:"Interface: CameraDevice",sidebar_label:"CameraDevice",custom_edit_url:null},c={unversionedId:"api/interfaces/cameradevice.cameradevice-1",id:"api/interfaces/cameradevice.cameradevice-1",isDocsHomePage:!1,title:"Interface: CameraDevice",description:"CameraDevice.CameraDevice",source:"@site/docs/api/interfaces/cameradevice.cameradevice-1.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/cameradevice.cameradevice-1",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradevice-1",editUrl:null,version:"current",sidebar_label:"CameraDevice",frontMatter:{id:"cameradevice.cameradevice-1",title:"Interface: CameraDevice",sidebar_label:"CameraDevice",custom_edit_url:null},sidebar:"visionSidebar",previous:{title:"Class: CameraRuntimeError",permalink:"/react-native-vision-camera/docs/api/classes/cameraerror.cameraruntimeerror"},next:{title:"Interface: CameraDeviceFormat",permalink:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"}},s=[{value:"Properties",id:"properties",children:[{value:"devices",id:"devices",children:[]},{value:"formats",id:"formats",children:[]},{value:"hasFlash",id:"hasflash",children:[]},{value:"hasTorch",id:"hastorch",children:[]},{value:"id",id:"id",children:[]},{value:"isMultiCam",id:"ismulticam",children:[]},{value:"maxZoom",id:"maxzoom",children:[]},{value:"minZoom",id:"minzoom",children:[]},{value:"name",id:"name",children:[]},{value:"neutralZoom",id:"neutralzoom",children:[]},{value:"position",id:"position",children:[]},{value:"supportsDepthCapture",id:"supportsdepthcapture",children:[]},{value:"supportsFocus",id:"supportsfocus",children:[]},{value:"supportsLowLightBoost",id:"supportslowlightboost",children:[]},{value:"supportsRawCapture",id:"supportsrawcapture",children:[]}]}],p={toc:s};function l(e){var a=e.components,t=(0,i.Z)(e,["components"]);return(0,n.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice"},"CameraDevice"),".CameraDevice"),(0,n.kt)("p",null,"Represents a camera device discovered by the ",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/classes/camera.camera-1#getavailablecameradevices"},(0,n.kt)("inlineCode",{parentName:"a"},"Camera.getAvailableCameraDevices()"))," function"),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"devices"},"devices"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"devices"),": ",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameradevice#physicalcameradevicetype"},(0,n.kt)("em",{parentName:"a"},"PhysicalCameraDeviceType")),"[]"),(0,n.kt)("p",null,"The physical devices this ",(0,n.kt)("inlineCode",{parentName:"p"},"CameraDevice")," contains."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If this camera device is a ",(0,n.kt)("strong",{parentName:"li"},"logical camera")," (combination of multiple physical cameras), there are multiple cameras in this array."),(0,n.kt)("li",{parentName:"ul"},"If this camera device is a ",(0,n.kt)("strong",{parentName:"li"},"physical camera"),", there is only a single element in this array.")),(0,n.kt)("p",null,"You can check if the camera is a logical multi-camera by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"isMultiCam")," property."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L197"},"CameraDevice.ts:197")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"formats"},"formats"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"formats"),": ",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameradevice.cameradeviceformat"},(0,n.kt)("em",{parentName:"a"},"CameraDeviceFormat")),"[]"),(0,n.kt)("p",null,"All available formats for this camera device. Use this to find the best format for your use case and set it to the Camera's ",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/interfaces/cameraprops.cameraprops-1#format"},(0,n.kt)("inlineCode",{parentName:"a"},"Camera's .format"))," property."),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"https://cuvent.github.io/react-native-vision-camera/docs/guides/formats"},"the Camera Formats documentation")," for more information about Camera Formats."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L244"},"CameraDevice.ts:244")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"hasflash"},"hasFlash"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"hasFlash"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Specifies whether this camera supports enabling flash for photo capture."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L209"},"CameraDevice.ts:209")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"hastorch"},"hasTorch"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"hasTorch"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Specifies whether this camera supports continuously enabling the flash to act like a torch (flash with video capture)"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L213"},"CameraDevice.ts:213")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"id"},"id"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"id"),": ",(0,n.kt)("em",{parentName:"p"},"string")),(0,n.kt)("p",null,"The native ID of the camera device instance."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L188"},"CameraDevice.ts:188")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"ismulticam"},"isMultiCam"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"isMultiCam"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"A property indicating whether the receiver is a logical camera consisting of multiple physical cameras."),(0,n.kt)("p",null,"Examples:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The Dual Camera, which supports seamlessly switching between a wide and telephoto camera while zooming and generating depth data from the disparities between the different points of view of the physical cameras."),(0,n.kt)("li",{parentName:"ul"},"The TrueDepth Camera, which generates depth data from disparities between a YUV camera and an Infrared camera pointed in the same direction.")),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L221"},"CameraDevice.ts:221")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"maxzoom"},"maxZoom"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"maxZoom"),": ",(0,n.kt)("em",{parentName:"p"},"number")),(0,n.kt)("p",null,"Maximum available zoom factor"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L229"},"CameraDevice.ts:229")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"minzoom"},"minZoom"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"minZoom"),": ",(0,n.kt)("em",{parentName:"p"},"number")),(0,n.kt)("p",null,"Minimum available zoom factor"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L225"},"CameraDevice.ts:225")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"name"},"name"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"name"),": ",(0,n.kt)("em",{parentName:"p"},"string")),(0,n.kt)("p",null,"A friendly localized name describing the camera."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L205"},"CameraDevice.ts:205")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"neutralzoom"},"neutralZoom"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"neutralZoom"),": ",(0,n.kt)("em",{parentName:"p"},"number")),(0,n.kt)("p",null,"The zoom percentage (",(0,n.kt)("inlineCode",{parentName:"p"},"0.0"),"-",(0,n.kt)("inlineCode",{parentName:"p"},"1.0"),') where the camera is "neutral".'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For single-physical cameras this property is always ",(0,n.kt)("inlineCode",{parentName:"li"},"0.0"),"."),(0,n.kt)("li",{parentName:"ul"},"For multi cameras this property is a value between ",(0,n.kt)("inlineCode",{parentName:"li"},"0.0")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"1.0"),", where the camera is in wide-angle mode and hasn't switched to the ultra-wide (",(0,n.kt)("inlineCode",{parentName:"li"},"0.5"),"x zoom) or telephoto camera yet.")),(0,n.kt)("p",null,"Use this value as an initial value for the zoom property if you implement custom zoom. (e.g. reanimated shared value should be initially set to this value)"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L238"},"CameraDevice.ts:238")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"position"},"position"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"position"),": ",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/modules/cameraposition#cameraposition"},(0,n.kt)("em",{parentName:"a"},"CameraPosition"))),(0,n.kt)("p",null,"Specifies the physical position of this camera. (back or front)"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L201"},"CameraDevice.ts:201")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"supportsdepthcapture"},"supportsDepthCapture"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"supportsDepthCapture"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Whether this camera supports taking photos with depth data."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"! Work in Progress !")),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L254"},"CameraDevice.ts:254")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"supportsfocus"},"supportsFocus"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"supportsFocus"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Specifies whether this device supports focussing (",(0,n.kt)("a",{parentName:"p",href:"/react-native-vision-camera/docs/api/classes/camera.camera-1#focus"},(0,n.kt)("inlineCode",{parentName:"a"},"Camera.focus(...)")),")"),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L264"},"CameraDevice.ts:264")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"supportslowlightboost"},"supportsLowLightBoost"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"supportsLowLightBoost"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Whether this camera device supports low light boost."),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L248"},"CameraDevice.ts:248")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"supportsrawcapture"},"supportsRawCapture"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"supportsRawCapture"),": ",(0,n.kt)("em",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Whether this camera supports taking photos in RAW format"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"! Work in Progress !")),(0,n.kt)("p",null,"Defined in: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cuvent/react-native-vision-camera/blob/3bf4197/src/CameraDevice.ts#L260"},"CameraDevice.ts:260")))}l.isMDXComponent=!0}}]);