"use strict";(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[191],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(g,i(i({ref:r},u),{},{components:t})):n.createElement(g,i({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,r,t){var n=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},6396:function(e,r,t){t.d(r,{Z:function(){return p}});var n=t(7462),a=t(7294),o=t(2389),i=t(9443);var s=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(3616),c=t(6010),u="tabItem_vU9c";function m(e){var r,t,o,i=e.lazy,m=e.block,p=e.defaultValue,d=e.values,g=e.groupId,v=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=d?d:f.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),k=(0,l.lx)(h,(function(e,r){return e.value===r.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(r=null!=p?p:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(o=f[0])?void 0:o.props.value;if(null!==b&&!h.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=s(),N=y.tabGroupChoices,w=y.setTabGroupChoices,P=(0,a.useState)(b),C=P[0],O=P[1],S=[],F=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var x=N[g];null!=x&&x!==C&&h.some((function(e){return e.value===x}))&&O(x)}var E=function(e){var r=e.currentTarget,t=S.indexOf(r),n=h[t].value;n!==C&&(F(r),O(n),null!=g&&w(g,n))},j=function(e){var r,t=null;switch(e.key){case"ArrowRight":var n=S.indexOf(e.currentTarget)+1;t=S[n]||S[0];break;case"ArrowLeft":var a=S.indexOf(e.currentTarget)-1;t=S[a]||S[S.length-1]}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},v)},h.map((function(e){var r=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===r?0:-1,"aria-selected":C===r,key:r,ref:function(e){return S.push(e)},onKeyDown:j,onFocus:E,onClick:E},o,{className:(0,c.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":C===r})}),null!=t?t:r)}))),i?(0,a.cloneElement)(f.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==C})}))))}function p(e){var r=(0,o.Z)();return a.createElement(m,(0,n.Z)({key:String(r)},e))}},4237:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var n=t(7462),a=t(3366),o=(t(7294),t(3905)),i=t(4996),s=(t(6396),t(8215),["components"]),l={id:"frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",sidebar_label:"Overview"},c=void 0,u={unversionedId:"guides/frame-processors-plugins-overview",id:"guides/frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",description:"Overview",source:"@site/docs/guides/FRAME_PROCESSORS_CREATE_OVERVIEW.mdx",sourceDirName:"guides",slug:"/guides/frame-processors-plugins-overview",permalink:"/react-native-vision-camera/docs/guides/frame-processors-plugins-overview",editUrl:"https://github.com/mrousavy/react-native-vision-camera/edit/main/docs/docs/guides/FRAME_PROCESSORS_CREATE_OVERVIEW.mdx",tags:[],version:"current",frontMatter:{id:"frame-processors-plugins-overview",title:"Creating Frame Processor Plugins",sidebar_label:"Overview"},sidebar:"visionSidebar",previous:{title:"Frame Processors",permalink:"/react-native-vision-camera/docs/guides/frame-processors"},next:{title:"Creating Frame Processor Plugins (iOS)",permalink:"/react-native-vision-camera/docs/guides/frame-processors-plugins-ios"}},m=[{value:"Overview",id:"overview",children:[{value:"Types",id:"types",children:[],level:3},{value:"Return values",id:"return-values",children:[],level:3},{value:"Parameters",id:"parameters",children:[],level:3},{value:"Exceptions",id:"exceptions",children:[],level:3}],level:2},{value:"What&#39;s possible?",id:"whats-possible",children:[],level:2},{value:"Implementations",id:"implementations",children:[{value:"Long-running Frame Processors",id:"long-running-frame-processors",children:[],level:3},{value:"Async Frame Processors with Event Emitters",id:"async-frame-processors-with-event-emitters",children:[],level:3},{value:"Benchmarking Frame Processor Plugins",id:"benchmarking-frame-processor-plugins",children:[{value:"\ud83d\ude80 Create your first Frame Processor Plugin for iOS or Android!",id:"-create-your-first-frame-processor-plugin-for-ios-or-android",children:[],level:4}],level:3}],level:2}],p={toc:m};function d(e){var r=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Frame Processor Plugins are ",(0,o.kt)("strong",{parentName:"p"},"native functions")," which can be directly called from a JS Frame Processor. (See ",(0,o.kt)("a",{parentName:"p",href:"frame-processors"},'"Frame Processors"'),")"),(0,o.kt)("p",null,"They ",(0,o.kt)("strong",{parentName:"p"},"receive a frame from the Camera")," as an input and can return any kind of output. For example, a ",(0,o.kt)("inlineCode",{parentName:"p"},"scanQRCodes")," function returns an array of detected QR code strings in the frame:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{4-5}","{4-5}":!0},"function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    'worklet'\n    const qrCodes = scanQRCodes(frame)\n    console.log(`QR Codes in Frame: ${qrCodes}`)\n  }, [])\n\n  return (\n    <Camera frameProcessor={frameProcessor} {...cameraProps} />\n  )\n}\n")),(0,o.kt)("p",null,"To achieve ",(0,o.kt)("strong",{parentName:"p"},"maximum performance"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"scanQRCodes")," function is written in a native language (e.g. Objective-C), but it will be directly called from the VisionCamera Frame Processor JavaScript-Runtime."),(0,o.kt)("h3",{id:"types"},"Types"),(0,o.kt)("p",null,"Similar to a TurboModule, the Frame Processor Plugin Registry API automatically manages type conversion from JS <-> native. They are converted into the most efficient data-structures, as seen here:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"JS Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Objective-C/Swift Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Java/Kotlin Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NSNumber*")," (double)"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Double"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NSNumber*")," (boolean)"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NSString*")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"String"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"[]")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NSArray*")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ReadableNativeArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{}")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NSDictionary*")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ReadableNativeMap"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"undefined")," / ",(0,o.kt)("inlineCode",{parentName:"td"},"null")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"nil")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"null"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(any, any) => void")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/facebook/react-native/blob/9a43eac7a32a6ba3164a048960101022a92fcd5a/React/Base/RCTBridgeModule.h#L20-L24"},(0,o.kt)("inlineCode",{parentName:"a"},"RCTResponseSenderBlock"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(Object, Object) -> void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/src/Frame.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"Frame"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/ios/Frame%20Processor/Frame.h"},(0,o.kt)("inlineCode",{parentName:"a"},"Frame*"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://developer.android.com/reference/androidx/camera/core/ImageProxy"},(0,o.kt)("inlineCode",{parentName:"a"},"ImageProxy")))))),(0,o.kt)("h3",{id:"return-values"},"Return values"),(0,o.kt)("p",null,"Return values will automatically be converted to JS values, assuming they are representable in the ",(0,o.kt)("a",{parentName:"p",href:"#types"},'"Types" table'),". So the following Java Frame Processor Plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  return "cat";\n}\n')),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," in JS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export function detectObject(frame: Frame): string {\n  'worklet'\n  const result = __detectObject(frame)\n  console.log(result) // <-- \"cat\"\n}\n")),(0,o.kt)("p",null,"You can also manipulate the buffer and return it (or a copy of it) by returning a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/ios/Frame%20Processor/Frame.h"},(0,o.kt)("inlineCode",{parentName:"a"},"Frame")),"/",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/camera/core/ImageProxy"},(0,o.kt)("inlineCode",{parentName:"a"},"ImageProxy"))," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  ImageProxy resizedImage = new ImageProxy(/* ... */);\n  return resizedImage;\n}\n")),(0,o.kt)("p",null,"Which returns a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/src/Frame.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"Frame"))," in JS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet';\n  // creates a new `Frame` that's 720x480\n  const resizedFrame = resize(frame, 720, 480)\n\n  // by downscaling the frame, the `detectObjects` function runs faster.\n  const objects = detectObjects(resizedFrame)\n  console.log(objects)\n}, [])\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"Frame Processors can also accept parameters, following the same type convention as ",(0,o.kt)("a",{parentName:"p",href:"#return-values"},"return values"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const codes = scanCodes(frame, ['qr', 'barcode'])\n}, [])\n")),(0,o.kt)("p",null,'Or with multiple ("variadic") parameters:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  const codes = scanCodes(frame, true, 'hello-world', 42)\n}, [])\n")),(0,o.kt)("h3",{id:"exceptions"},"Exceptions"),(0,o.kt)("p",null,"To let the user know that something went wrong you can use Exceptions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  if (params[0] instanceof String) {\n    // ...\n  } else {\n    throw new Exception("First argument has to be a string!");\n  }\n}\n')),(0,o.kt)("p",null,"Which will throw a JS-error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const frameProcessor = useFrameProcessor((frame) => {\n  'worklet'\n  try {\n    const codes = scanCodes(frame, true)\n  } catch (e) {\n    console.log(`Error: ${e.message}`)\n  }\n}, [])\n")),(0,o.kt)("h2",{id:"whats-possible"},"What's possible?"),(0,o.kt)("p",null,"You can run any native code you want in a Frame Processor Plugin. Just like in the native iOS and Android Camera APIs, you will receive a frame (",(0,o.kt)("inlineCode",{parentName:"p"},"CMSampleBuffer")," on iOS, ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageProxy")," on Android) which you can use however you want. In other words; ",(0,o.kt)("strong",{parentName:"p"},"everything is possible"),"."),(0,o.kt)("h2",{id:"implementations"},"Implementations"),(0,o.kt)("h3",{id:"long-running-frame-processors"},"Long-running Frame Processors"),(0,o.kt)("p",null,"If your Frame Processor takes longer than a single frame interval to execute, or runs asynchronously, you can create a ",(0,o.kt)("strong",{parentName:"p"},"copy of the frame")," and dispatch the actual frame processing to a ",(0,o.kt)("strong",{parentName:"p"},"separate thread"),"."),(0,o.kt)("p",null,"For example, a realtime video chat application might use WebRTC to send the frames to the server. I/O operations (networking) are asynchronous, and we don't ",(0,o.kt)("em",{parentName:"p"},"need")," to wait for the upload to succeed before pushing the next frame, so we copy the frame and perform the upload on another Thread."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Object callback(ImageProxy image, Object[] params) {\n  String serverURL = (String)params[0];\n  ImageProxy imageCopy = new ImageProxy(/* ... */);\n\n  uploaderQueue.runAsync(() -> {\n    WebRTC.uploadImage(imageCopy, serverURL);\n    imageCopy.close();\n  });\n\n  return null;\n}\n")),(0,o.kt)("h3",{id:"async-frame-processors-with-event-emitters"},"Async Frame Processors with Event Emitters"),(0,o.kt)("p",null,"You might also run some very complex AI algorithms which are not fast enough to smoothly run at ",(0,o.kt)("strong",{parentName:"p"},"30 FPS")," (",(0,o.kt)("strong",{parentName:"p"},"33ms"),'). To not drop any frames you can create a custom "frame queue" which processes the copied frames and calls back into JS via a React event emitter. For this you\'ll have to create a Native Module that handles the asynchronous native -> JS communication, see ',(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/native-modules-android#sending-events-to-javascript"},'"Sending events to JavaScript" (Android)')," and ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/native-modules-ios#sending-events-to-javascript"},'"Sending events to JavaScript" (iOS)'),"."),(0,o.kt)("p",null,"This might look like this for the user:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const frameProcessor = useFrameProcessor((frame) => {\n    'worklet'\n    SomeAI.process(frame) // does not block frame processor, runs async\n  }, [])\n\n  useEffect(() => {\n    SomeAI.addListener((results) => {\n      // gets called asynchronously, goes through the React Event Emitter system\n      console.log(`AI results: ${results}`)\n    })\n  }, [])\n\n  return (\n    <Camera frameProcessor={frameProcessor} {...cameraProps} />\n  )\n}\n")),(0,o.kt)("p",null,"This way you can handle queueing up the frames yourself and asynchronously call back into JS at some later point in time using event emitters."),(0,o.kt)("h3",{id:"benchmarking-frame-processor-plugins"},"Benchmarking Frame Processor Plugins"),(0,o.kt)("p",null,"Your Frame Processor Plugins have to be fast. VisionCamera automatically detects slow Frame Processors and outputs relevant information in the native console (Xcode: ",(0,o.kt)("strong",{parentName:"p"},"Debug Area"),", Android Studio: ",(0,o.kt)("strong",{parentName:"p"},"Logcat"),"):"),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:(0,i.Z)("img/slow-log.png"),width:"80%"})),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:(0,i.Z)("img/slow-log-2.png"),width:"80%"})),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"-create-your-first-frame-processor-plugin-for-ios-or-android"},"\ud83d\ude80 Create your first Frame Processor Plugin for ",(0,o.kt)("a",{parentName:"h4",href:"frame-processors-plugins-ios"},"iOS")," or ",(0,o.kt)("a",{parentName:"h4",href:"frame-processors-plugins-android"},"Android"),"!"))}d.isMDXComponent=!0}}]);