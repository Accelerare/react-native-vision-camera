"use strict";(self.webpackChunkvision_camera=self.webpackChunkvision_camera||[]).push([[442],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return a?n.createElement(f,i(i({ref:t},m),{},{components:a})):n.createElement(f,i({ref:t},m))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1721:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var n=a(3117),r=(a(7294),a(3905)),o=a(4996);const i={id:"formats",title:"Camera Formats",sidebar_label:"Camera Formats"},s=void 0,l={unversionedId:"guides/formats",id:"guides/formats",title:"Camera Formats",description:"What are camera formats?",source:"@site/docs/guides/FORMATS.mdx",sourceDirName:"guides",slug:"/guides/formats",permalink:"/docs/guides/formats",draft:!1,editUrl:"https://github.com/mrousavy/react-native-vision-camera/edit/main/docs/docs/guides/FORMATS.mdx",tags:[],version:"current",frontMatter:{id:"formats",title:"Camera Formats",sidebar_label:"Camera Formats"},sidebar:"visionSidebar",previous:{title:"Lifecycle",permalink:"/docs/guides/lifecycle"},next:{title:"Taking Photos/Recording Videos",permalink:"/docs/guides/capturing"}},p={},m=[{value:"What are camera formats?",id:"what-are-camera-formats",level:3},{value:"What if I don&#39;t want to choose a format?",id:"what-if-i-dont-want-to-choose-a-format",level:3},{value:"What you need to know about cameras",id:"what-you-need-to-know-about-cameras",level:3},{value:"Get started",id:"get-started",level:3},{value:"Sort",id:"sort",level:3},{value:"Props",id:"props",level:3},{value:"\ud83d\ude80 Next section: Taking Photos/Recording Videos",id:"-next-section-taking-photosrecording-videos",level:4}],u={toc:m},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",null,(0,r.kt)("img",{align:"right",width:"283",src:(0,o.Z)("img/example.png")})),(0,r.kt)("h3",{id:"what-are-camera-formats"},"What are camera formats?"),(0,r.kt)("p",null,"Each camera device (see ",(0,r.kt)("a",{parentName:"p",href:"devices"},"Camera Devices"),") provides a number of capture formats that have different specifications. There are formats specifically designed for high-resolution photo capture, which have very high photo output quality but in return only support frame-rates of up to 30 FPS. On the other side, there might be formats that are designed for slow-motion video capture which have frame-rates up to 240 FPS."),(0,r.kt)("h3",{id:"what-if-i-dont-want-to-choose-a-format"},"What if I don't want to choose a format?"),(0,r.kt)("p",null,"If you don't want to specify the best format for your camera device, you don't have to. The Camera ",(0,r.kt)("em",{parentName:"p"},"automatically chooses the best matching format")," for the current camera device. This is why the Camera's ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," property is ",(0,r.kt)("em",{parentName:"p"},"optional"),"."),(0,r.kt)("p",null,"If you don't want to do a lot of filtering, but still want to let the camera know what your intentions are, you can use the Camera's ",(0,r.kt)("inlineCode",{parentName:"p"},"preset")," property."),(0,r.kt)("p",null,"For example, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"'medium'")," preset if you want to create a video-chat application that shouldn't excessively use mobile data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function App() {\n  const devices = useCameraDevices()\n  const device = devices.back\n\n  if (device == null) return <LoadingView />\n  return (\n    <Camera\n      style={StyleSheet.absoluteFill}\n      device={device}\n      preset="medium"\n    />\n  )\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera/blob/main/src/CameraPreset.ts"},"CameraPreset.ts")," type for more information about presets")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You cannot set ",(0,r.kt)("inlineCode",{parentName:"p"},"preset")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," at the same time; if ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," is set, ",(0,r.kt)("inlineCode",{parentName:"p"},"preset")," must be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," and vice versa!")),(0,r.kt)("h3",{id:"what-you-need-to-know-about-cameras"},"What you need to know about cameras"),(0,r.kt)("p",null,'To understand a bit more about camera formats, you first need to understand a few "general camera basics":'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each camera device is built differently, e.g. ",(0,r.kt)("em",{parentName:"li"},"Telephoto devices")," often don't provide frame-rates as high as ",(0,r.kt)("em",{parentName:"li"},"Wide-Angle devices"),"."),(0,r.kt)("li",{parentName:"ul"},"Formats are designed for specific use-cases, so formats with high resolution photo output don't support frame-rates as high as formats with lower resolution."),(0,r.kt)("li",{parentName:"ul"},"Different formats provide different field-of-views (FOV), maximum zoom factors, color spaces (iOS only), resolutions, frame rate ranges, and systems to assist with capture (auto-focus systems, video stabilization systems, ...)")),(0,r.kt)("h3",{id:"get-started"},"Get started"),(0,r.kt)("p",null,"Each application has different needs, so the format filtering is up to you."),(0,r.kt)("p",null,"To get all available formats, simply use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CameraDevice"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},".formats")," property. See how to get a camera device in the ",(0,r.kt)("a",{parentName:"p",href:"devices"},"Camera Devices guide"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can also manually get all camera devices and decide which device to use based on the available ",(0,r.kt)("inlineCode",{parentName:"p"},"formats"),".")),(0,r.kt)("p",null,"This example shows how you would pick the format with the ",(0,r.kt)("em",{parentName:"p"},"highest frame rate"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function getMaxFps(format: CameraDeviceFormat): number {\n  return format.frameRateRanges.reduce((prev, curr) => {\n    if (curr.maxFrameRate > prev) return curr.maxFrameRate\n    else return prev\n  }, 0)\n}\n\nfunction App() {\n  const devices = useCameraDevices('wide-angle-camera')\n  const device = devices.back\n\n  const format = useMemo(() => {\n    return device?.formats.reduce((prev, curr) => {\n      if (prev == null) return curr\n      if (getMaxFps(curr) > getMaxFps(prev)) return curr\n      else return prev\n    }, undefined)\n  }, [device?.formats])\n\n  if (device == null) return <LoadingView />\n  return (\n    <Camera\n      style={StyleSheet.absoluteFill}\n      device={device}\n      format={format}\n    />\n  )\n}\n")),(0,r.kt)("p",null,"Note that you don't want to simply pick the highest frame rate, as those formats often have incredibly low resolutions. You want to find a balance between high frame rate and high resolution, so instead you might want to use the ",(0,r.kt)("inlineCode",{parentName:"p"},".sort")," function."),(0,r.kt)("h3",{id:"sort"},"Sort"),(0,r.kt)("p",null,"To sort your formats, create a custom comparator function which will be used as the ",(0,r.kt)("inlineCode",{parentName:"p"},".sort")," function's argument. The custom comparator then compares formats, preferring ones with higher frame rate AND higher resolution."),(0,r.kt)("p",null,'Implement this however you want, I personally use a "point-based system":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const sortFormatsByResolution = (left: CameraDeviceFormat, right: CameraDeviceFormat): number => {\n  // in this case, points aren\'t "normalized" (e.g. higher resolution = 1 point, lower resolution = -1 points)\n  let leftPoints = left.photoHeight * left.photoWidth\n  let rightPoints = right.photoHeight * right.photoWidth\n  \n  // we also care about video dimensions, not only photo.\n  leftPoints += left.videoWidth * left.videoHeight\n  rightPoints += right.videoWidth * right.videoHeight\n\n  // you can also add points for FPS, etc\n\n  return rightPoints - leftPoints\n}\n\n// and then call it:\nconst formats = useMemo(() => device?.formats.sort(sortFormatsByResolution), [device?.formats])\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Be careful that you don't ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," out a lot of formats since you might end up having no format to use at all. (",(0,r.kt)("em",{parentName:"p"},"Remember; not all devices support e.g. 240 FPS."),") Always carefully sort instead of filter, and pick the best available format - that way you are guaranteed to have a format available, even if your desired specifications aren't fully met.")),(0,r.kt)("h3",{id:"props"},"Props"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Camera")," View provides a few props that depend on the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),". For example, you can only set the ",(0,r.kt)("inlineCode",{parentName:"p"},"fps")," prop to a value that is supported by the current ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),". So if you have a format that supports 240 FPS, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"fps")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"240"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  // ...\n  return (\n    <Camera\n      style={StyleSheet.absoluteFill}\n      device={device}\n      format={format}\n      fps={240}\n    />\n  )\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You should always verify that the format supports the desired FPS, and fall back to ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," (or a value that is supported, like ",(0,r.kt)("inlineCode",{parentName:"p"},"30"),") if it doesn't.")),(0,r.kt)("p",null,"Other props that depend on the ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fps"),": Specifies the frame rate to use"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hdr"),": Enables HDR photo or video capture and preview"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lowLightBoost"),": Enables a night-mode/low-light-boost for photo or video capture and preview"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"colorSpace"),": Uses the specified color-space for photo or video capture and preview (iOS only since Android only uses ",(0,r.kt)("inlineCode",{parentName:"li"},"YUV"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"videoStabilizationMode"),": Specifies the video stabilization mode to use for this camera device")),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"-next-section-taking-photosrecording-videos"},"\ud83d\ude80 Next section: ",(0,r.kt)("a",{parentName:"h4",href:"./capturing"},"Taking Photos/Recording Videos")))}d.isMDXComponent=!0}}]);